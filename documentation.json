{
    "pipes": [
        {
            "name": "TablesValuesPipe",
            "id": "pipe-TablesValuesPipe-75d4122b8bb551d70eb43401c534ef6d",
            "file": "src/app/layout/table/table-value.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tableValues",
            "sourceCode": "import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'tableValues'\r\n})\r\nexport class TablesValuesPipe implements PipeTransform {\r\n  // tslint:disable-next-line: typedef\r\n  transform(obj: any) {\r\n    const result = [];\r\n    for (const key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        result.push(obj[key]);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "AuthData",
            "id": "interface-AuthData-c22202c9384d41574d1aadf52c368c5d",
            "file": "src/app/auth/+state/auth.reducer.ts",
            "type": "interface",
            "sourceCode": "import { AuthActions, AuthActionTypes } from './auth.actions';\nimport { User } from '../data-models/user';\n\nexport interface AuthData {\n  loading: boolean;\n  user: User;\n  error: '';\n}\nexport interface AuthState {\n  readonly auth: AuthData;\n}\n\nexport const initialState: AuthData = {\n  error: '',\n  user: null,\n  loading: false\n};\n\nexport function authReducer(\n  state = initialState,\n  action: AuthActions\n): AuthData {\n  switch (action.type) {\n    case AuthActionTypes.Login:\n      return { ...state, loading: true };\n\n    case AuthActionTypes.LoginSuccess: {\n      return { ...state, user: action.payload, loading: false };\n    }\n    case AuthActionTypes.LoginFail: {\n      return { ...state, user: null, loading: false };\n    }\n    default:\n      return state;\n  }\n}\n",
            "properties": [
                {
                    "name": "error",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AuthEntity",
            "id": "interface-AuthEntity-924285ec847911fbaaad9a586c876792",
            "file": "src/app/auth/+state/auth.models.ts",
            "type": "interface",
            "sourceCode": "export interface AuthEntity {\n  id: string | number; // Primary ID\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Interface for the &#39;Auth&#39; data</p>\n",
            "methods": []
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-c22202c9384d41574d1aadf52c368c5d",
            "file": "src/app/auth/+state/auth.reducer.ts",
            "type": "interface",
            "sourceCode": "import { AuthActions, AuthActionTypes } from './auth.actions';\nimport { User } from '../data-models/user';\n\nexport interface AuthData {\n  loading: boolean;\n  user: User;\n  error: '';\n}\nexport interface AuthState {\n  readonly auth: AuthData;\n}\n\nexport const initialState: AuthData = {\n  error: '',\n  user: null,\n  loading: false\n};\n\nexport function authReducer(\n  state = initialState,\n  action: AuthActions\n): AuthData {\n  switch (action.type) {\n    case AuthActionTypes.Login:\n      return { ...state, loading: true };\n\n    case AuthActionTypes.LoginSuccess: {\n      return { ...state, user: action.payload, loading: false };\n    }\n    case AuthActionTypes.LoginFail: {\n      return { ...state, user: null, loading: false };\n    }\n    default:\n      return state;\n  }\n}\n",
            "properties": [
                {
                    "name": "auth",
                    "type": "AuthData",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Details",
            "id": "interface-Details-9d495f115d953a8505b3519e564ab469",
            "file": "src/app/auth/data-models/details.ts",
            "type": "interface",
            "sourceCode": "import * as faker from 'faker/locale/en_US';\r\nexport interface Details {\r\n    text?: string;\r\n    id?: number;\r\n    url?: string;\r\n    details?: string;\r\n  }\r\n\r\n\r\nexport  const generateDetail = (): Details => {\r\n    return {\r\n      id: faker.random.number(),\r\n      url: faker.image.imageUrl(),\r\n      details: faker.lorem.words(),\r\n      text :  faker.lorem.word(),\r\n    };\r\n  };\r\n\r\nexport const generateDetails = (\r\n    count = faker.random.number({ min: 1, max: 20 })\r\n  ): Details[] => {\r\n    return Array.apply(null, Array(count)).map(() => generateDetail());\r\n  };\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "details",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DetailsData",
            "id": "interface-DetailsData-d14270131a66fb548cec1d96ab2f15cd",
            "file": "src/app/pages/products/+state/details/details.reducer.ts",
            "type": "interface",
            "sourceCode": "import { DetailsActions, DetailsActionTypes } from './details.actions';\r\n\r\nimport { Action } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\nimport { Details } from 'src/app/auth/data-models/details';\r\n\r\nexport interface DetailsData extends EntityState<Details> {\r\n  error: string;\r\n  selectedDetailsId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface DetailsState {\r\n  readonly details: DetailsData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Details> = createEntityAdapter<Details>({});\r\n\r\nexport const initialState: DetailsData = adapter.getInitialState({\r\n  error: '',\r\n  selectedDetailsId: null,\r\n  loading: false\r\n});\r\n\r\nexport function detailsReducer(\r\n  state = initialState,\r\n  action: DetailsActions\r\n): DetailsData {\r\n  switch (action.type) {\r\n    case DetailsActionTypes.LoadDetails:\r\n      return { ...state, loading: true };\r\n\r\n\r\n    case DetailsActionTypes.LoadDetailsSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case DetailsActionTypes.LoadDetailsFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedDetailsId = (state: DetailsData) =>\r\n  state.selectedDetailsId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectDetailIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectDetailEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllDetails,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectDetailsTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedDetailsId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "DetailsState",
            "id": "interface-DetailsState-d14270131a66fb548cec1d96ab2f15cd",
            "file": "src/app/pages/products/+state/details/details.reducer.ts",
            "type": "interface",
            "sourceCode": "import { DetailsActions, DetailsActionTypes } from './details.actions';\r\n\r\nimport { Action } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\nimport { Details } from 'src/app/auth/data-models/details';\r\n\r\nexport interface DetailsData extends EntityState<Details> {\r\n  error: string;\r\n  selectedDetailsId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface DetailsState {\r\n  readonly details: DetailsData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Details> = createEntityAdapter<Details>({});\r\n\r\nexport const initialState: DetailsData = adapter.getInitialState({\r\n  error: '',\r\n  selectedDetailsId: null,\r\n  loading: false\r\n});\r\n\r\nexport function detailsReducer(\r\n  state = initialState,\r\n  action: DetailsActions\r\n): DetailsData {\r\n  switch (action.type) {\r\n    case DetailsActionTypes.LoadDetails:\r\n      return { ...state, loading: true };\r\n\r\n\r\n    case DetailsActionTypes.LoadDetailsSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case DetailsActionTypes.LoadDetailsFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedDetailsId = (state: DetailsData) =>\r\n  state.selectedDetailsId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectDetailIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectDetailEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllDetails,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectDetailsTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "details",
                    "type": "DetailsData",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "HeaderButtonsData",
            "id": "interface-HeaderButtonsData-078fb2c55e69aaea87a22aa7907f241d",
            "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
            "type": "interface",
            "sourceCode": "import { HeaderButtons } from './../../../../auth/data-models/header-button.d';\r\nimport { Action } from '@ngrx/store';\r\nimport { HeaderButtonAction, HeaderButtonActionTypes } from '../headers-button/headers-button.actions';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\n\r\nexport interface HeaderButtonsData extends EntityState<HeaderButtons> {\r\n  error: string;\r\n  selectedHeaderButtonsId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface HeadersButtonState {\r\n  readonly headerButtons: HeaderButtonsData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<HeaderButtons> = createEntityAdapter<HeaderButtons>({});\r\n\r\nexport const initialState: HeaderButtonsData = adapter.getInitialState({\r\n  error: '',\r\n  selectedHeaderButtonsId: null,\r\n  loading: false\r\n});\r\n\r\nexport function headerButtonsReducer(\r\n  state = initialState,\r\n  action: HeaderButtonAction\r\n): HeaderButtonsData {\r\n  switch (action.type) {\r\n    case HeaderButtonActionTypes.LoadHeadersButtons:\r\n      return { ...state, loading: true };\r\n\r\n    case HeaderButtonActionTypes.LoadHeadersButtonsSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case HeaderButtonActionTypes.LoadHeadersButtonsFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedHeaderButtonsId = (state: HeaderButtonsData) =>\r\n  state.selectedHeaderButtonsId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectedHeaderButtonsIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectedHeaderButtonsEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllselectedHeaderButtons,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectselectedHeaderButtonsTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "selectedHeaderButtonsId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "HeadersButtonState",
            "id": "interface-HeadersButtonState-078fb2c55e69aaea87a22aa7907f241d",
            "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
            "type": "interface",
            "sourceCode": "import { HeaderButtons } from './../../../../auth/data-models/header-button.d';\r\nimport { Action } from '@ngrx/store';\r\nimport { HeaderButtonAction, HeaderButtonActionTypes } from '../headers-button/headers-button.actions';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\n\r\nexport interface HeaderButtonsData extends EntityState<HeaderButtons> {\r\n  error: string;\r\n  selectedHeaderButtonsId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface HeadersButtonState {\r\n  readonly headerButtons: HeaderButtonsData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<HeaderButtons> = createEntityAdapter<HeaderButtons>({});\r\n\r\nexport const initialState: HeaderButtonsData = adapter.getInitialState({\r\n  error: '',\r\n  selectedHeaderButtonsId: null,\r\n  loading: false\r\n});\r\n\r\nexport function headerButtonsReducer(\r\n  state = initialState,\r\n  action: HeaderButtonAction\r\n): HeaderButtonsData {\r\n  switch (action.type) {\r\n    case HeaderButtonActionTypes.LoadHeadersButtons:\r\n      return { ...state, loading: true };\r\n\r\n    case HeaderButtonActionTypes.LoadHeadersButtonsSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case HeaderButtonActionTypes.LoadHeadersButtonsFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedHeaderButtonsId = (state: HeaderButtonsData) =>\r\n  state.selectedHeaderButtonsId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectedHeaderButtonsIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectedHeaderButtonsEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllselectedHeaderButtons,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectselectedHeaderButtonsTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "headerButtons",
                    "type": "HeaderButtonsData",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ImagesData",
            "id": "interface-ImagesData-5ceec80d8afc668232f43ff8f17587b7",
            "file": "src/app/pages/products/+state/images/images.reducer.ts",
            "type": "interface",
            "sourceCode": "import { ImagesActions, ImagesActionTypes } from './images.actions';\r\n\r\nimport { Action } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\nimport { Image } from 'src/app/auth/data-models/image';\r\n\r\nexport interface ImagesData extends EntityState<Image> {\r\n  error: string;\r\n  selectedImagesId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface ImagesState {\r\n  readonly products: ImagesData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Image> = createEntityAdapter<Image>({});\r\n\r\nexport const initialState: ImagesData = adapter.getInitialState({\r\n  error: '',\r\n  selectedImagesId: null,\r\n  loading: false\r\n});\r\n\r\nexport function imagesReducer(\r\n  state = initialState,\r\n  action: ImagesActions\r\n): ImagesData {\r\n  switch (action.type) {\r\n    case ImagesActionTypes.LoadImages:\r\n      return { ...state, loading: true };\r\n\r\n\r\n    case ImagesActionTypes.LoadImagesSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case ImagesActionTypes.LoadImagesFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedImagesId = (state: ImagesData) =>\r\n  state.selectedImagesId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectImageIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectImageEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllImages,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectImagesTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "selectedImagesId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "ImagesState",
            "id": "interface-ImagesState-5ceec80d8afc668232f43ff8f17587b7",
            "file": "src/app/pages/products/+state/images/images.reducer.ts",
            "type": "interface",
            "sourceCode": "import { ImagesActions, ImagesActionTypes } from './images.actions';\r\n\r\nimport { Action } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\nimport { Image } from 'src/app/auth/data-models/image';\r\n\r\nexport interface ImagesData extends EntityState<Image> {\r\n  error: string;\r\n  selectedImagesId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface ImagesState {\r\n  readonly products: ImagesData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Image> = createEntityAdapter<Image>({});\r\n\r\nexport const initialState: ImagesData = adapter.getInitialState({\r\n  error: '',\r\n  selectedImagesId: null,\r\n  loading: false\r\n});\r\n\r\nexport function imagesReducer(\r\n  state = initialState,\r\n  action: ImagesActions\r\n): ImagesData {\r\n  switch (action.type) {\r\n    case ImagesActionTypes.LoadImages:\r\n      return { ...state, loading: true };\r\n\r\n\r\n    case ImagesActionTypes.LoadImagesSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case ImagesActionTypes.LoadImagesFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedImagesId = (state: ImagesData) =>\r\n  state.selectedImagesId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectImageIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectImageEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllImages,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectImagesTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "products",
                    "type": "ImagesData",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MainData",
            "id": "interface-MainData-306be65d0f97a8a53d4a683f53d83386",
            "file": "src/app/pages/products/+state/main/main.reducer.ts",
            "type": "interface",
            "sourceCode": "import { MainActions, MainActionTypes } from './main.actions';\r\n\r\nimport { Action } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\nimport { Main } from 'src/app/auth/data-models/main';\r\n\r\nexport interface MainData extends EntityState<Main> {\r\n  error: string;\r\n  selectedMainId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface MainState {\r\n  readonly main: MainData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Main> = createEntityAdapter<Main>({});\r\n\r\nexport const initialState: MainData = adapter.getInitialState({\r\n  error: '',\r\n  selectedMainId: null,\r\n  loading: false\r\n});\r\n\r\nexport function mainReducer(\r\n  state = initialState,\r\n  action: MainActions\r\n): MainData {\r\n  switch (action.type) {\r\n    case MainActionTypes.LoadMain:\r\n      return { ...state, loading: true };\r\n\r\n\r\n    case MainActionTypes.LoadMainSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case MainActionTypes.LoadMainFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedMainId = (state: MainData) =>\r\n  state.selectedMainId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectMainIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectMainEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllMain,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectMainTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedMainId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "MainState",
            "id": "interface-MainState-306be65d0f97a8a53d4a683f53d83386",
            "file": "src/app/pages/products/+state/main/main.reducer.ts",
            "type": "interface",
            "sourceCode": "import { MainActions, MainActionTypes } from './main.actions';\r\n\r\nimport { Action } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\nimport { Main } from 'src/app/auth/data-models/main';\r\n\r\nexport interface MainData extends EntityState<Main> {\r\n  error: string;\r\n  selectedMainId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface MainState {\r\n  readonly main: MainData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Main> = createEntityAdapter<Main>({});\r\n\r\nexport const initialState: MainData = adapter.getInitialState({\r\n  error: '',\r\n  selectedMainId: null,\r\n  loading: false\r\n});\r\n\r\nexport function mainReducer(\r\n  state = initialState,\r\n  action: MainActions\r\n): MainData {\r\n  switch (action.type) {\r\n    case MainActionTypes.LoadMain:\r\n      return { ...state, loading: true };\r\n\r\n\r\n    case MainActionTypes.LoadMainSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case MainActionTypes.LoadMainFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedMainId = (state: MainData) =>\r\n  state.selectedMainId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectMainIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectMainEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllMain,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectMainTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "main",
                    "type": "MainData",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductsData",
            "id": "interface-ProductsData-99dd5dbeaa4a505a9c445d6020ed2b61",
            "file": "src/app/pages/products/+state/products.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Product } from './../../../auth/data-models/product.d';\r\nimport { Action } from '@ngrx/store';\r\nimport { ProductsActions, ProductsActionTypes } from './products.actions';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\n\r\nexport interface ProductsData extends EntityState<Product> {\r\n  error: string;\r\n  selectedProductId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface ProductsState {\r\n  readonly products: ProductsData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Product> = createEntityAdapter<Product>({});\r\n\r\nexport const initialState: ProductsData = adapter.getInitialState({\r\n  error: '',\r\n  selectedProductId: null,\r\n  loading: false\r\n});\r\n\r\nexport function productsReducer(\r\n  state = initialState,\r\n  action: ProductsActions\r\n): ProductsData {\r\n  switch (action.type) {\r\n    case ProductsActionTypes.LoadProducts:\r\n      return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadHeadersButtons:\r\n    //   return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadImages:\r\n    //   return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadDetails:\r\n    //   return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadMain:\r\n    //   return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadServices:\r\n    //   return { ...state, loading: true };\r\n\r\n\r\n    case ProductsActionTypes.LoadProductsSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    // case ProductsActionTypes.LoadHeadersButtonsSuccess: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadImagesSuccess: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadMainSuccess: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadDetailsFail: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadServicesSuccess: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    case ProductsActionTypes.LoadProductsFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    // case ProductsActionTypes.LoadHeadersButtonsFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadServicesFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadImagesFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadDetailsFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadMainFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    case ProductsActionTypes.UpdateProductsSuccess:\r\n      return adapter.updateOne({ id: action.payload.id, changes: action.payload }, state);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getSelectedProductId = (state: ProductsData) =>\r\n  state.selectedProductId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectProductIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectProductEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllProducts,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectProductsTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "selectedProductId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "ProductsState",
            "id": "interface-ProductsState-99dd5dbeaa4a505a9c445d6020ed2b61",
            "file": "src/app/pages/products/+state/products.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Product } from './../../../auth/data-models/product.d';\r\nimport { Action } from '@ngrx/store';\r\nimport { ProductsActions, ProductsActionTypes } from './products.actions';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\n\r\nexport interface ProductsData extends EntityState<Product> {\r\n  error: string;\r\n  selectedProductId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface ProductsState {\r\n  readonly products: ProductsData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Product> = createEntityAdapter<Product>({});\r\n\r\nexport const initialState: ProductsData = adapter.getInitialState({\r\n  error: '',\r\n  selectedProductId: null,\r\n  loading: false\r\n});\r\n\r\nexport function productsReducer(\r\n  state = initialState,\r\n  action: ProductsActions\r\n): ProductsData {\r\n  switch (action.type) {\r\n    case ProductsActionTypes.LoadProducts:\r\n      return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadHeadersButtons:\r\n    //   return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadImages:\r\n    //   return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadDetails:\r\n    //   return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadMain:\r\n    //   return { ...state, loading: true };\r\n\r\n    // case ProductsActionTypes.LoadServices:\r\n    //   return { ...state, loading: true };\r\n\r\n\r\n    case ProductsActionTypes.LoadProductsSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    // case ProductsActionTypes.LoadHeadersButtonsSuccess: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadImagesSuccess: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadMainSuccess: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadDetailsFail: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadServicesSuccess: {\r\n    //   return adapter.setAll(action.payload, { ...state, error: '' });\r\n    // }\r\n\r\n    case ProductsActionTypes.LoadProductsFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    // case ProductsActionTypes.LoadHeadersButtonsFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadServicesFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadImagesFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadDetailsFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    // case ProductsActionTypes.LoadMainFail: {\r\n    //   return adapter.removeAll({ ...state, error: action.payload });\r\n    // }\r\n\r\n    case ProductsActionTypes.UpdateProductsSuccess:\r\n      return adapter.updateOne({ id: action.payload.id, changes: action.payload }, state);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getSelectedProductId = (state: ProductsData) =>\r\n  state.selectedProductId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectProductIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectProductEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllProducts,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectProductsTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "products",
                    "type": "ProductsData",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RouterStateUrl",
            "id": "interface-RouterStateUrl-0f85780da3f6eeef2067993d5188f560",
            "file": "src/app/store/reducers/router.reducer.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  ActivatedRouteSnapshot,\r\n  Params,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport * as fromRouter from '@ngrx/router-store';\r\nimport { ActionReducerMap, createFeatureSelector } from '@ngrx/store';\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  queryParams: Params;\r\n  params: Params;\r\n}\r\n\r\nexport interface State {\r\n  routerReducer: fromRouter.RouterReducerState<RouterStateSnapshot>;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  routerReducer: fromRouter.routerReducer,\r\n};\r\n\r\nexport const getRouterState = createFeatureSelector<\r\n  fromRouter.RouterReducerState<RouterStateUrl>\r\n>('routerReducer');\r\n\r\nexport class CustomSerializer\r\n  implements fromRouter.RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    const { url } = routerState;\r\n    const { queryParams } = routerState.root;\r\n    let state: ActivatedRouteSnapshot = routerState.root;\r\n\r\n    while (state.firstChild) {\r\n      state = state.firstChild;\r\n    }\r\n\r\n    const { params } = state;\r\n\r\n    return { url, queryParams, params };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "params",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "queryParams",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ServiceData",
            "id": "interface-ServiceData-defadc091553a913fe5f7a7c186bf1bf",
            "file": "src/app/pages/products/+state/services/services.reducer.ts",
            "type": "interface",
            "sourceCode": "import { ServicesActions, ServicesActionTypes } from './services.actions';\r\n\r\nimport { Action } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\nimport { Service } from 'src/app/auth/data-models/service';\r\n\r\nexport interface ServiceData extends EntityState<Service> {\r\n  error: string;\r\n  selectedServiceId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface ServiceState {\r\n  readonly service: ServiceData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Service> = createEntityAdapter<Service>({});\r\n\r\nexport const initialState: ServiceData = adapter.getInitialState({\r\n  error: '',\r\n  selectedServiceId: null,\r\n  loading: false\r\n});\r\n\r\nexport function serviceReducer(\r\n  state = initialState,\r\n  action: ServicesActions\r\n): ServiceData {\r\n  switch (action.type) {\r\n    case ServicesActionTypes.LoadServices:\r\n      return { ...state, loading: true };\r\n\r\n\r\n    case ServicesActionTypes.LoadServicesSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case ServicesActionTypes.LoadServicesFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedServiceId = (state: ServiceData) =>\r\n  state.selectedServiceId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectServiceIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectServiceEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllService,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectServiceTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "selectedServiceId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "ServiceState",
            "id": "interface-ServiceState-defadc091553a913fe5f7a7c186bf1bf",
            "file": "src/app/pages/products/+state/services/services.reducer.ts",
            "type": "interface",
            "sourceCode": "import { ServicesActions, ServicesActionTypes } from './services.actions';\r\n\r\nimport { Action } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\nimport { Service } from 'src/app/auth/data-models/service';\r\n\r\nexport interface ServiceData extends EntityState<Service> {\r\n  error: string;\r\n  selectedServiceId: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface ServiceState {\r\n  readonly service: ServiceData;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Service> = createEntityAdapter<Service>({});\r\n\r\nexport const initialState: ServiceData = adapter.getInitialState({\r\n  error: '',\r\n  selectedServiceId: null,\r\n  loading: false\r\n});\r\n\r\nexport function serviceReducer(\r\n  state = initialState,\r\n  action: ServicesActions\r\n): ServiceData {\r\n  switch (action.type) {\r\n    case ServicesActionTypes.LoadServices:\r\n      return { ...state, loading: true };\r\n\r\n\r\n    case ServicesActionTypes.LoadServicesSuccess: {\r\n      return adapter.setAll(action.payload, { ...state, error: '' });\r\n    }\r\n\r\n    case ServicesActionTypes.LoadServicesFail: {\r\n      return adapter.removeAll({ ...state, error: action.payload });\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getselectedServiceId = (state: ServiceData) =>\r\n  state.selectedServiceId;\r\n\r\nexport const {\r\n  // select the array of user ids\r\n  selectIds: selectServiceIds,\r\n\r\n  // select the dictionary of Products entities\r\n  selectEntities: selectServiceEntities,\r\n\r\n  // select the array of Productss\r\n  selectAll: selectAllService,\r\n\r\n  // select the total Products count\r\n  selectTotal: selectServiceTotal\r\n} = adapter.getSelectors();\r\n",
            "properties": [
                {
                    "name": "service",
                    "type": "ServiceData",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-0f85780da3f6eeef2067993d5188f560",
            "file": "src/app/store/reducers/router.reducer.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  ActivatedRouteSnapshot,\r\n  Params,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport * as fromRouter from '@ngrx/router-store';\r\nimport { ActionReducerMap, createFeatureSelector } from '@ngrx/store';\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  queryParams: Params;\r\n  params: Params;\r\n}\r\n\r\nexport interface State {\r\n  routerReducer: fromRouter.RouterReducerState<RouterStateSnapshot>;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  routerReducer: fromRouter.routerReducer,\r\n};\r\n\r\nexport const getRouterState = createFeatureSelector<\r\n  fromRouter.RouterReducerState<RouterStateUrl>\r\n>('routerReducer');\r\n\r\nexport class CustomSerializer\r\n  implements fromRouter.RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    const { url } = routerState;\r\n    const { queryParams } = routerState.root;\r\n    let state: ActivatedRouteSnapshot = routerState.root;\r\n\r\n    while (state.firstChild) {\r\n      state = state.firstChild;\r\n    }\r\n\r\n    const { params } = state;\r\n\r\n    return { url, queryParams, params };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "routerReducer",
                    "type": "fromRouter.RouterReducerState<RouterStateSnapshot>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Theme",
            "id": "interface-Theme-a714a7efc51857136f2d920b81492906",
            "file": "src/app/theme/theme.ts",
            "type": "interface",
            "sourceCode": "export interface Theme {\n  name: string;\n  properties: any;\n}\n\nexport const light: Theme = {\n  name: 'light',\n  properties: {\n    '--foreground-default': '#08090A',\n    '--foreground-secondary': '#41474D',\n    '--foreground-tertiary': '#797C80',\n    '--foreground-quaternary': '#F4FAFF',\n    '--foreground-light': '#41474D',\n\n    '--background-default': '#F4FAFF',\n    '--background-secondary': '#A3B9CC',\n    '--background-tertiary': '#5C7D99',\n    '--background-light': '#FFFFFF',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#B2FFE7'\n  }\n};\n\nexport const dark: Theme = {\n  name: 'dark',\n  properties: {\n    '--foreground-default': '#5C7D99',\n    '--foreground-secondary': '#A3B9CC',\n    '--foreground-tertiary': '#F4FAFF',\n    '--foreground-quaternary': '#E5E5E5',\n    '--foreground-light': '#FFFFFF',\n\n    '--background-default': '#797C80',\n    '--background-secondary': '#41474D',\n    '--background-tertiary': '#08090A',\n    '--background-light': '#41474D',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#B2FFE7'\n  }\n};\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "properties",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-cc62495d941322b045ffcf900a644d81",
            "file": "src/app/auth/+state/auth.effects.ts",
            "properties": [
                {
                    "name": "login$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AuthActionTypes.Login),\n    mergeMap((action: authActions.Login) =>\n      this.authService\n        .login(action.payload)\n        .pipe(\n          map((user: User) => new authActions.LoginSuccess(user)),\n          catchError((error) => {\n            alert('Login Failed...');\n            return of(new authActions.LoginFail(error));\n          })\n        )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "navigateToProfile$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AuthActionTypes.LoginSuccess),\n    map((action: authActions.LoginSuccess) => action.payload),\n    tap(() => this.router.navigate([`/product/main2`]))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { AuthService } from '../../auth/service/auth.service';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { AuthActionTypes } from './auth.actions';\nimport { mergeMap, map, catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as authActions from './auth.actions';\nimport { User } from '../data-models/user.d';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthEffects {\n  @Effect()\n  login$ = this.actions$.pipe(\n    ofType(AuthActionTypes.Login),\n    mergeMap((action: authActions.Login) =>\n      this.authService\n        .login(action.payload)\n        .pipe(\n          map((user: User) => new authActions.LoginSuccess(user)),\n          catchError((error) => {\n            alert('Login Failed...');\n            return of(new authActions.LoginFail(error));\n          })\n        )\n    )\n  );\n\n  @Effect({ dispatch: false })\n  navigateToProfile$ = this.actions$.pipe(\n    ofType(AuthActionTypes.LoginSuccess),\n    map((action: authActions.LoginSuccess) => action.payload),\n    tap(() => this.router.navigate([`/product/main2`]))\n  );\n\n  constructor(\n    private actions$: Actions,\n    private authService: AuthService,\n    private router: Router\n  ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-5d6bf35b9c23abef4e7cc076fd9a459c",
            "file": "src/app/auth/service/auth.service.ts",
            "properties": [
                {
                    "name": "user$",
                    "defaultValue": "this.userSubject$.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userSubject$",
                    "defaultValue": "new BehaviorSubject<User>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkAuthentication",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "authenticate",
                            "type": "Authenticate"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "authenticate",
                            "type": "Authenticate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { LoginSuccess, LoginFail } from './../+state/auth.actions';\r\nimport { AuthState } from './../+state/auth.reducer';\r\nimport { Store } from '@ngrx/store';\r\nimport { environment } from '../../../environments/environment';\r\nimport { User } from '../data-models/user.d';\r\nimport { Authenticate } from '../data-models/authenticate.d';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private userSubject$ = new BehaviorSubject<User>(null);\r\n  user$ = this.userSubject$.asObservable();\r\n\r\n  constructor(private httpClient: HttpClient,\r\n              private store: Store<AuthState>) {\r\n    // const user = JSON.parse(localStorage.getItem('user'));\r\n    // if (user) {\r\n    //   this.store.dispatch(new LoginSuccess(user));\r\n    // }\r\n  }\r\n\r\n  // login user\r\n  login(authenticate: Authenticate): Observable<User> {\r\n    return this.httpClient.post<User>(\r\n      environment.api_url + 'login',\r\n      authenticate\r\n    ).pipe(tap((user: User) => {\r\n      this.userSubject$.next(user);\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n    }));\r\n  }\r\n\r\n  checkAuthentication(): boolean{\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user) {\r\n        this.store.dispatch(new LoginSuccess(user));\r\n        return true;\r\n    }else{\r\n        this.store.dispatch(new LoginFail(user));\r\n        return false;\r\n    }\r\n  }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "store",
                        "type": "Store<AuthState>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DetailsEffects",
            "id": "injectable-DetailsEffects-c481d819491365c79e94b4b014f9dd4a",
            "file": "src/app/pages/products/+state/details/details.effects.ts",
            "properties": [
                {
                    "name": "loadDetails$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(DetailsActionTypes.LoadDetails),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getDetails()\r\n        .pipe(\r\n          map(\r\n            (details: Details[]) =>\r\n            new DetailsActions.LoadDetailsSuccess(details)\r\n          ),\r\n          catchError(error => of(new DetailsActions.LoadDetailsFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadFilteredDetails$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/details')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getDetails(category)\r\n        .pipe(\r\n          map((details: Details[]) => new DetailsActions.LoadDetailsSuccess(details)),\r\n          catchError(error => of(new DetailsActions.LoadDetailsFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { ProductsService } from '../../services/products/products.service';\r\nimport * as DetailsActions from '../details/details.actions';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { mergeMap, map, tap, catchError, filter, switchMap } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { ROUTER_NAVIGATION, RouterNavigationAction } from '@ngrx/router-store';\r\nimport { DetailsActionTypes } from '../details/details.actions';\r\nimport { Details } from 'src/app/auth/data-models/details';\r\n\r\n@Injectable()\r\nexport class DetailsEffects {\r\n  @Effect()\r\n  loadFilteredDetails$ = this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/details')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getDetails(category)\r\n        .pipe(\r\n          map((details: Details[]) => new DetailsActions.LoadDetailsSuccess(details)),\r\n          catchError(error => of(new DetailsActions.LoadDetailsFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadDetails$ = this.actions$.pipe(\r\n    ofType(DetailsActionTypes.LoadDetails),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getDetails()\r\n        .pipe(\r\n          map(\r\n            (details: Details[]) =>\r\n            new DetailsActions.LoadDetailsSuccess(details)\r\n          ),\r\n          catchError(error => of(new DetailsActions.LoadDetailsFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productService: ProductsService\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HeaderButtonsEffects",
            "id": "injectable-HeaderButtonsEffects-72288b4384bfd6c8771bf3e8c6c55d9f",
            "file": "src/app/pages/products/+state/headers-button/headers-button.effects.ts",
            "properties": [
                {
                    "name": "loadFilteredHeaderButtons$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/headers-button')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getHeaderButtons(category)\r\n        .pipe(\r\n          map((headerButtons: HeaderButtons[]) => new HeaderButtonAction.LoadHeadersButtonsSuccess(headerButtons)),\r\n          catchError(error => of(new HeaderButtonAction.LoadHeadersButtonsFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadHeadersButton$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(HeaderButtonActionTypes.LoadHeadersButtons),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getHeaderButtons()\r\n        .pipe(\r\n          map(\r\n            (headerButtons: HeaderButtons[]) =>\r\n              new HeaderButtonAction.LoadHeadersButtonsSuccess(headerButtons)\r\n          ),\r\n          catchError(error => of(new HeaderButtonAction.LoadHeadersButtonsFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { ProductsService } from './../../services/products/products.service';\r\nimport { LoadHeadersButtons } from '../headers-button/headers-button.actions';\r\nimport { HeaderButtonActionTypes } from '../headers-button/headers-button.actions';\r\nimport { HeaderButtons } from './../../../../auth/data-models/header-button.d';\r\nimport * as HeaderButtonAction from '../headers-button/headers-button.actions';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { mergeMap, map, tap, catchError, filter, switchMap } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { ROUTER_NAVIGATION, RouterNavigationAction } from '@ngrx/router-store';\r\n\r\n@Injectable()\r\nexport class HeaderButtonsEffects {\r\n  @Effect()\r\n  loadFilteredHeaderButtons$ = this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/headers-button')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getHeaderButtons(category)\r\n        .pipe(\r\n          map((headerButtons: HeaderButtons[]) => new HeaderButtonAction.LoadHeadersButtonsSuccess(headerButtons)),\r\n          catchError(error => of(new HeaderButtonAction.LoadHeadersButtonsFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n  @Effect()\r\n  loadHeadersButton$ = this.actions$.pipe(\r\n    ofType(HeaderButtonActionTypes.LoadHeadersButtons),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getHeaderButtons()\r\n        .pipe(\r\n          map(\r\n            (headerButtons: HeaderButtons[]) =>\r\n              new HeaderButtonAction.LoadHeadersButtonsSuccess(headerButtons)\r\n          ),\r\n          catchError(error => of(new HeaderButtonAction.LoadHeadersButtonsFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productService: ProductsService\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ImagesEffects",
            "id": "injectable-ImagesEffects-e070bd37c105370af4a64bbc759b012a",
            "file": "src/app/pages/products/+state/images/images.effects.ts",
            "properties": [
                {
                    "name": "loadFilteredImages$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/images')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getImages(category)\r\n        .pipe(\r\n          map((images: Image[]) => new ImagesActions.LoadImagesSuccess(images)),\r\n          catchError(error => of(new ImagesActions.LoadImagesFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadImages$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ImagesActionTypes.LoadImages),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getImages()\r\n        .pipe(\r\n          map(\r\n            (images: Image[]) =>\r\n            new ImagesActions.LoadImagesSuccess(images)\r\n          ),\r\n          catchError(error => of(new ImagesActions.LoadImagesFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { ProductsService } from './../../services/products/products.service';\r\nimport * as ImagesActions from '../images/images.actions';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { mergeMap, map, tap, catchError, filter, switchMap } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { ROUTER_NAVIGATION, RouterNavigationAction } from '@ngrx/router-store';\r\nimport { Image } from 'src/app/auth/data-models/image';\r\nimport { ImagesActionTypes } from '../images/images.actions';\r\n\r\n@Injectable()\r\nexport class ImagesEffects {\r\n  @Effect()\r\n  loadFilteredImages$ = this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/images')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getImages(category)\r\n        .pipe(\r\n          map((images: Image[]) => new ImagesActions.LoadImagesSuccess(images)),\r\n          catchError(error => of(new ImagesActions.LoadImagesFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadImages$ = this.actions$.pipe(\r\n    ofType(ImagesActionTypes.LoadImages),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getImages()\r\n        .pipe(\r\n          map(\r\n            (images: Image[]) =>\r\n            new ImagesActions.LoadImagesSuccess(images)\r\n          ),\r\n          catchError(error => of(new ImagesActions.LoadImagesFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productService: ProductsService\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MainEffects",
            "id": "injectable-MainEffects-84e6053511fea3a656b41722a5ac71fa",
            "file": "src/app/pages/products/+state/main/main.effects.ts",
            "properties": [
                {
                    "name": "loadFilteredMain$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/main')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getMain(category)\r\n        .pipe(\r\n          map((main: Main[]) => new MainActions.LoadMainSuccess(main)),\r\n          catchError(error => of(new MainActions.LoadMainFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadMain$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(MainActionTypes.LoadMain),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getMain()\r\n        .pipe(\r\n          map(\r\n            (main: Main[]) =>\r\n            new MainActions.LoadMainSuccess(main)\r\n          ),\r\n          catchError(error => of(new MainActions.LoadMainFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { getMain } from './index';\r\nimport { ProductsService } from '../../services/products/products.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { mergeMap, map, tap, catchError, filter, switchMap } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { ROUTER_NAVIGATION, RouterNavigationAction } from '@ngrx/router-store';\r\nimport { Image } from 'src/app/auth/data-models/image';\r\nimport {  MainActionTypes } from '../main/main.actions';\r\nimport * as MainActions from '../main/main.actions';\r\nimport { Main } from 'src/app/auth/data-models/main';\r\n@Injectable()\r\nexport class MainEffects {\r\n  @Effect()\r\n  loadFilteredMain$ = this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/main')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getMain(category)\r\n        .pipe(\r\n          map((main: Main[]) => new MainActions.LoadMainSuccess(main)),\r\n          catchError(error => of(new MainActions.LoadMainFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadMain$ = this.actions$.pipe(\r\n    ofType(MainActionTypes.LoadMain),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getMain()\r\n        .pipe(\r\n          map(\r\n            (main: Main[]) =>\r\n            new MainActions.LoadMainSuccess(main)\r\n          ),\r\n          catchError(error => of(new MainActions.LoadMainFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productService: ProductsService\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsEffects",
            "id": "injectable-ProductsEffects-4339ff2a00c687698db6db3ff040dd61",
            "file": "src/app/pages/products/+state/products.effects.ts",
            "properties": [
                {
                    "name": "loadFilteredProducts$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/products')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getProducts(category)\r\n        .pipe(\r\n          map((products: Product[]) => new productActions.LoadProductsSuccess(products)),\r\n          catchError(error => of(new productActions.LoadProductsFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadProducts$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ProductsActionTypes.LoadProducts),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getProducts()\r\n        .pipe(\r\n          map(\r\n            (products: Product[]) =>\r\n              new productActions.LoadProductsSuccess(products)\r\n          ),\r\n          catchError(error => of(new productActions.LoadProductsFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "updateProducts$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ProductsActionTypes.UpdateProductsSuccess),\r\n    mergeMap((action) =>\r\n      this.productService\r\n        .updateProducts((action as any).payload)\r\n        .pipe(\r\n          map(\r\n            (products: Product[]) =>\r\n              new productActions.LoadProducts()\r\n          ),\r\n          catchError(error => of(new productActions.UpdateProductsFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Product } from './../../../auth/data-models/product.d';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { ProductsService } from './../services/products/products.service';\r\nimport { ProductsActionTypes } from './../+state/products.actions';\r\nimport { mergeMap, map, tap, catchError, filter, switchMap } from 'rxjs/operators';\r\nimport * as productActions from './../+state/products.actions';\r\nimport { of } from 'rxjs';\r\nimport { ROUTER_NAVIGATION, RouterNavigationAction } from '@ngrx/router-store';\r\n\r\n@Injectable()\r\nexport class ProductsEffects {\r\n  @Effect()\r\n  loadFilteredProducts$ = this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/products')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getProducts(category)\r\n        .pipe(\r\n          map((products: Product[]) => new productActions.LoadProductsSuccess(products)),\r\n          catchError(error => of(new productActions.LoadProductsFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadProducts$ = this.actions$.pipe(\r\n    ofType(ProductsActionTypes.LoadProducts),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getProducts()\r\n        .pipe(\r\n          map(\r\n            (products: Product[]) =>\r\n              new productActions.LoadProductsSuccess(products)\r\n          ),\r\n          catchError(error => of(new productActions.LoadProductsFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n\r\n\r\n  @Effect()\r\n  updateProducts$ = this.actions$.pipe(\r\n    ofType(ProductsActionTypes.UpdateProductsSuccess),\r\n    mergeMap((action) =>\r\n      this.productService\r\n        .updateProducts((action as any).payload)\r\n        .pipe(\r\n          map(\r\n            (products: Product[]) =>\r\n              new productActions.LoadProducts()\r\n          ),\r\n          catchError(error => of(new productActions.UpdateProductsFail(error)))\r\n        )\r\n    )\r\n  );\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productService: ProductsService\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService"
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-1939a4a994bd373d53d74b43a0e41889",
            "file": "src/app/pages/products/services/products/products.service.ts",
            "properties": [
                {
                    "name": "data",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getDetails",
                    "args": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Details[]>",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHeaderButtons",
                    "args": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HeaderButtons[]>",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImages",
                    "args": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Image[]>",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMain",
                    "args": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Main[]>",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getServices",
                    "args": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Service[]>",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProducts",
                    "args": [
                        {
                            "name": "changes",
                            "type": "Partial<Product>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "Partial<Product>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HeaderButtons } from './../../../../auth/data-models/header-button.d';\nimport { Product } from './../../../../auth/data-models';\nimport { environment } from './../../../../../environments/environment';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { Image } from 'src/app/auth/data-models/image';\nimport { Details } from 'src/app/auth/data-models/details';\nimport { Main } from 'src/app/auth/data-models/main';\nimport { Service } from 'src/app/auth/data-models/service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n  private data: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  constructor(private httpClient: HttpClient) { }\n\n\n  // Get all products from database\n  getProducts(category = null): Observable<Product[]> {\n    const url =\n      category !== null\n        ? environment.api_url + `products?category=${category}`\n        : environment.api_url + `products`;\n\n    return this.httpClient.get<Product[]>(url);\n  }\n\n  //  Update product based on Id in database\n  updateProducts(changes: Partial<Product>): Observable<Product[]> {\n    console.log(changes);\n    const url = environment.api_url + `products/` + changes.id;\n    return this.httpClient.put<Product[]>(url, changes);\n  }\n\n\n// Getter and setter\n  public setData(data: any): void {\n    this.data.next(data);\n  }\n\n  public getData(): Observable<any> {\n    return this.data.asObservable();\n  }\n\n  // Get all HeaderButtons from database\n  getHeaderButtons(category = null): Observable<HeaderButtons[]> {\n    const url =\n      category !== null\n        ? environment.api_url + `headers-button?category=${category}`\n        : environment.api_url + `headers-button`;\n\n    return this.httpClient.get<HeaderButtons[]>(url);\n  }\n\n  // Get all products from database\n  getServices(category = null): Observable<Service[]> {\n    const url =\n      category !== null\n        ? environment.api_url + `Services?category=${category}`\n        : environment.api_url + `Services`;\n\n    return this.httpClient.get<Service[]>(url);\n  }\n\n  // Get all products from database\n  getImages(category = null): Observable<Image[]> {\n    const url =\n      category !== null\n        ? environment.api_url + `images?category=${category}`\n        : environment.api_url + `images`;\n\n    return this.httpClient.get<Image[]>(url);\n  }\n\n  // Get all products from database\n  getDetails(category = null): Observable<Details[]> {\n    const url =\n      category !== null\n        ? environment.api_url + `details?category=${category}`\n        : environment.api_url + `details`;\n\n    return this.httpClient.get<Details[]>(url);\n  }\n\n  // Get all products from database\n  getMain(category = null): Observable<Main[]> {\n    const url =\n      category !== null\n        ? environment.api_url + `main?category=${category}`\n        : environment.api_url + `main`;\n\n    return this.httpClient.get<Main[]>(url);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ServicesEffects",
            "id": "injectable-ServicesEffects-613a99d882cbbab4269f7d556079e6ca",
            "file": "src/app/pages/products/+state/services/services.effects.ts",
            "properties": [
                {
                    "name": "loadFilteredService$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/services')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getServices(category)\r\n        .pipe(\r\n          map((service: Service[]) => new ServicesActions.LoadServicesSuccess(service)),\r\n          catchError(error => of(new ServicesActions.LoadServicesFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadImages$",
                    "defaultValue": "this.actions$.pipe(\r\n    ofType(ServicesActionTypes.LoadServices),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getServices()\r\n        .pipe(\r\n          map((service: Service[]) => new ServicesActions.LoadServicesSuccess(service)),\r\n          catchError(error => of(new ServicesActions.LoadServicesFail(error)))\r\n        )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { ProductsService } from '../../services/products/products.service';\r\nimport * as ServicesActions from '../services/services.actions';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { mergeMap, map, tap, catchError, filter, switchMap } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { ROUTER_NAVIGATION, RouterNavigationAction } from '@ngrx/router-store';\r\nimport { Service } from 'src/app/auth/data-models/service';\r\nimport { ServicesActionTypes } from '../services/services.actions';\r\n\r\n@Injectable()\r\nexport class ServicesEffects {\r\n  @Effect()\r\n  loadFilteredService$ = this.actions$.pipe(\r\n    ofType(ROUTER_NAVIGATION),\r\n    filter((r: RouterNavigationAction) => r.payload.routerState.url.startsWith('/services')),\r\n    map((r: RouterNavigationAction) => r.payload.routerState.root.queryParams.category),\r\n    mergeMap((category: string) =>\r\n      this.productService\r\n        .getServices(category)\r\n        .pipe(\r\n          map((service: Service[]) => new ServicesActions.LoadServicesSuccess(service)),\r\n          catchError(error => of(new ServicesActions.LoadServicesFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadImages$ = this.actions$.pipe(\r\n    ofType(ServicesActionTypes.LoadServices),\r\n    mergeMap(() =>\r\n      this.productService\r\n        .getServices()\r\n        .pipe(\r\n          map((service: Service[]) => new ServicesActions.LoadServicesSuccess(service)),\r\n          catchError(error => of(new ServicesActions.LoadServicesFail(error)))\r\n        )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productService: ProductsService\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-e92003138fad7b4273a6bb58c62c6f6e",
            "file": "src/app/theme/theme.service.ts",
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "light",
                    "type": "Theme",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "availableThemes",
                    "defaultValue": "[light, dark]",
                    "type": "Theme[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "getAvailableThemes",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme[]",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "isDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "setActiveTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "setLightTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Theme, light, dark } from './theme';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  private active: Theme = light;\n  private availableThemes: Theme[] = [light, dark];\n\n  getAvailableThemes(): Theme[] {\n    return this.availableThemes;\n  }\n\n  getActiveTheme(): Theme {\n    return this.active;\n  }\n\n  isDarkTheme(): boolean {\n    return this.active.name === dark.name;\n  }\n\n  setDarkTheme(): void {\n    this.setActiveTheme(dark);\n  }\n\n  setLightTheme(): void {\n    this.setActiveTheme(light);\n  }\n\n  setActiveTheme(theme: Theme): void {\n    this.active = theme;\n\n    Object.keys(this.active.properties).forEach(property => {\n      document.documentElement.style.setProperty(\n        property,\n        this.active.properties[property]\n      );\n    });\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomSerializer",
            "id": "class-CustomSerializer-0f85780da3f6eeef2067993d5188f560",
            "file": "src/app/store/reducers/router.reducer.ts",
            "type": "class",
            "sourceCode": "import {\r\n  ActivatedRouteSnapshot,\r\n  Params,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport * as fromRouter from '@ngrx/router-store';\r\nimport { ActionReducerMap, createFeatureSelector } from '@ngrx/store';\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  queryParams: Params;\r\n  params: Params;\r\n}\r\n\r\nexport interface State {\r\n  routerReducer: fromRouter.RouterReducerState<RouterStateSnapshot>;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  routerReducer: fromRouter.routerReducer,\r\n};\r\n\r\nexport const getRouterState = createFeatureSelector<\r\n  fromRouter.RouterReducerState<RouterStateUrl>\r\n>('routerReducer');\r\n\r\nexport class CustomSerializer\r\n  implements fromRouter.RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    const { url } = routerState;\r\n    const { queryParams } = routerState.root;\r\n    let state: ActivatedRouteSnapshot = routerState.root;\r\n\r\n    while (state.firstChild) {\r\n      state = state.firstChild;\r\n    }\r\n\r\n    const { params } = state;\r\n\r\n    return { url, queryParams, params };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "serialize",
                    "args": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot"
                        }
                    ],
                    "optional": false,
                    "returnType": "RouterStateUrl",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                null
            ]
        },
        {
            "name": "LoadDetails",
            "id": "class-LoadDetails-3b0ca9274c6dd2df829021632ebc4343",
            "file": "src/app/pages/products/+state/details/details.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum DetailsActionTypes {\r\n   LoadDetails = '[Details] Load  Details',\r\n  LoadDetailsSuccess = '[Details API] Load Details Success',\r\n  LoadDetailsFail = '[Details API]  Load Details Fail',\r\n}\r\n\r\nexport class LoadDetails implements Action {\r\n  readonly type = DetailsActionTypes.LoadDetails;\r\n}\r\nexport class LoadDetailsSuccess implements Action {\r\n  readonly type = DetailsActionTypes.LoadDetailsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadDetailsFail implements Action {\r\n  readonly type = DetailsActionTypes.LoadDetailsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport type DetailsActions = LoadDetails\r\n  | LoadDetailsSuccess | LoadDetailsFail;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DetailsActionTypes.LoadDetails",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadDetailsFail",
            "id": "class-LoadDetailsFail-3b0ca9274c6dd2df829021632ebc4343",
            "file": "src/app/pages/products/+state/details/details.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum DetailsActionTypes {\r\n   LoadDetails = '[Details] Load  Details',\r\n  LoadDetailsSuccess = '[Details API] Load Details Success',\r\n  LoadDetailsFail = '[Details API]  Load Details Fail',\r\n}\r\n\r\nexport class LoadDetails implements Action {\r\n  readonly type = DetailsActionTypes.LoadDetails;\r\n}\r\nexport class LoadDetailsSuccess implements Action {\r\n  readonly type = DetailsActionTypes.LoadDetailsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadDetailsFail implements Action {\r\n  readonly type = DetailsActionTypes.LoadDetailsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport type DetailsActions = LoadDetails\r\n  | LoadDetailsSuccess | LoadDetailsFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DetailsActionTypes.LoadDetailsFail",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadDetailsSuccess",
            "id": "class-LoadDetailsSuccess-3b0ca9274c6dd2df829021632ebc4343",
            "file": "src/app/pages/products/+state/details/details.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum DetailsActionTypes {\r\n   LoadDetails = '[Details] Load  Details',\r\n  LoadDetailsSuccess = '[Details API] Load Details Success',\r\n  LoadDetailsFail = '[Details API]  Load Details Fail',\r\n}\r\n\r\nexport class LoadDetails implements Action {\r\n  readonly type = DetailsActionTypes.LoadDetails;\r\n}\r\nexport class LoadDetailsSuccess implements Action {\r\n  readonly type = DetailsActionTypes.LoadDetailsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadDetailsFail implements Action {\r\n  readonly type = DetailsActionTypes.LoadDetailsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport type DetailsActions = LoadDetails\r\n  | LoadDetailsSuccess | LoadDetailsFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DetailsActionTypes.LoadDetailsSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadHeadersButtons",
            "id": "class-LoadHeadersButtons-0f824e2b7c120ab215f58fb47b1c0966",
            "file": "src/app/pages/products/+state/headers-button/headers-button.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum HeaderButtonActionTypes {\r\n\r\n  LoadHeadersButtons = '[Headers Buttons] Load Headers Buttons',\r\n  LoadHeadersButtonsSuccess = '[Headers Buttons API] Load Headers Buttons Success',\r\n  LoadHeadersButtonsFail = '[Headers Buttons API]  Load Headers Buttons Fail'\r\n}\r\n\r\n\r\n\r\nexport class LoadHeadersButtons implements Action {\r\n  readonly type = HeaderButtonActionTypes.LoadHeadersButtons;\r\n}\r\nexport class LoadHeadersButtonsSuccess implements Action {\r\n  readonly type = HeaderButtonActionTypes.LoadHeadersButtonsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadHeadersButtonsFail implements Action {\r\n  readonly type = HeaderButtonActionTypes.LoadHeadersButtonsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\n\r\n\r\nexport type HeaderButtonAction =  LoadHeadersButtons | LoadHeadersButtonsFail | LoadHeadersButtonsSuccess ;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "HeaderButtonActionTypes.LoadHeadersButtons",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadHeadersButtonsFail",
            "id": "class-LoadHeadersButtonsFail-0f824e2b7c120ab215f58fb47b1c0966",
            "file": "src/app/pages/products/+state/headers-button/headers-button.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum HeaderButtonActionTypes {\r\n\r\n  LoadHeadersButtons = '[Headers Buttons] Load Headers Buttons',\r\n  LoadHeadersButtonsSuccess = '[Headers Buttons API] Load Headers Buttons Success',\r\n  LoadHeadersButtonsFail = '[Headers Buttons API]  Load Headers Buttons Fail'\r\n}\r\n\r\n\r\n\r\nexport class LoadHeadersButtons implements Action {\r\n  readonly type = HeaderButtonActionTypes.LoadHeadersButtons;\r\n}\r\nexport class LoadHeadersButtonsSuccess implements Action {\r\n  readonly type = HeaderButtonActionTypes.LoadHeadersButtonsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadHeadersButtonsFail implements Action {\r\n  readonly type = HeaderButtonActionTypes.LoadHeadersButtonsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\n\r\n\r\nexport type HeaderButtonAction =  LoadHeadersButtons | LoadHeadersButtonsFail | LoadHeadersButtonsSuccess ;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "HeaderButtonActionTypes.LoadHeadersButtonsFail",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadHeadersButtonsSuccess",
            "id": "class-LoadHeadersButtonsSuccess-0f824e2b7c120ab215f58fb47b1c0966",
            "file": "src/app/pages/products/+state/headers-button/headers-button.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum HeaderButtonActionTypes {\r\n\r\n  LoadHeadersButtons = '[Headers Buttons] Load Headers Buttons',\r\n  LoadHeadersButtonsSuccess = '[Headers Buttons API] Load Headers Buttons Success',\r\n  LoadHeadersButtonsFail = '[Headers Buttons API]  Load Headers Buttons Fail'\r\n}\r\n\r\n\r\n\r\nexport class LoadHeadersButtons implements Action {\r\n  readonly type = HeaderButtonActionTypes.LoadHeadersButtons;\r\n}\r\nexport class LoadHeadersButtonsSuccess implements Action {\r\n  readonly type = HeaderButtonActionTypes.LoadHeadersButtonsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadHeadersButtonsFail implements Action {\r\n  readonly type = HeaderButtonActionTypes.LoadHeadersButtonsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\n\r\n\r\nexport type HeaderButtonAction =  LoadHeadersButtons | LoadHeadersButtonsFail | LoadHeadersButtonsSuccess ;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "HeaderButtonActionTypes.LoadHeadersButtonsSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadImages",
            "id": "class-LoadImages-9c558da5bace1e5b2f42dc01379cdf2c",
            "file": "src/app/pages/products/+state/images/images.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ImagesActionTypes {\r\n   LoadImages = '[Images Page] Load Images',\r\n  LoadImagesSuccess = '[Images API] Load Images Success',\r\n  LoadImagesFail = '[Images API]  Load Images Fail',\r\n}\r\n\r\nexport class LoadImages implements Action {\r\n  readonly type = ImagesActionTypes.LoadImages;\r\n}\r\nexport class LoadImagesSuccess implements Action {\r\n  readonly type = ImagesActionTypes.LoadImagesSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadImagesFail implements Action {\r\n  readonly type = ImagesActionTypes.LoadImagesFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\n\r\nexport type ImagesActions = LoadImages\r\n  | LoadImagesSuccess | LoadImagesFail;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ImagesActionTypes.LoadImages",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadImagesFail",
            "id": "class-LoadImagesFail-9c558da5bace1e5b2f42dc01379cdf2c",
            "file": "src/app/pages/products/+state/images/images.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ImagesActionTypes {\r\n   LoadImages = '[Images Page] Load Images',\r\n  LoadImagesSuccess = '[Images API] Load Images Success',\r\n  LoadImagesFail = '[Images API]  Load Images Fail',\r\n}\r\n\r\nexport class LoadImages implements Action {\r\n  readonly type = ImagesActionTypes.LoadImages;\r\n}\r\nexport class LoadImagesSuccess implements Action {\r\n  readonly type = ImagesActionTypes.LoadImagesSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadImagesFail implements Action {\r\n  readonly type = ImagesActionTypes.LoadImagesFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\n\r\nexport type ImagesActions = LoadImages\r\n  | LoadImagesSuccess | LoadImagesFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ImagesActionTypes.LoadImagesFail",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadImagesSuccess",
            "id": "class-LoadImagesSuccess-9c558da5bace1e5b2f42dc01379cdf2c",
            "file": "src/app/pages/products/+state/images/images.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ImagesActionTypes {\r\n   LoadImages = '[Images Page] Load Images',\r\n  LoadImagesSuccess = '[Images API] Load Images Success',\r\n  LoadImagesFail = '[Images API]  Load Images Fail',\r\n}\r\n\r\nexport class LoadImages implements Action {\r\n  readonly type = ImagesActionTypes.LoadImages;\r\n}\r\nexport class LoadImagesSuccess implements Action {\r\n  readonly type = ImagesActionTypes.LoadImagesSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadImagesFail implements Action {\r\n  readonly type = ImagesActionTypes.LoadImagesFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\n\r\nexport type ImagesActions = LoadImages\r\n  | LoadImagesSuccess | LoadImagesFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ImagesActionTypes.LoadImagesSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMain",
            "id": "class-LoadMain-0e490eb5a03b711bc390e87734970a22",
            "file": "src/app/pages/products/+state/main/main.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum MainActionTypes {\r\n  LoadMain = '[Main] Load Main',\r\n  LoadMainSuccess = '[Main API] Load Main Success',\r\n  LoadMainFail = '[Main API]  Load Main Fail',\r\n}\r\n\r\nexport class LoadMain implements Action {\r\n  readonly type = MainActionTypes.LoadMain;\r\n}\r\nexport class LoadMainSuccess implements Action {\r\n  readonly type = MainActionTypes.LoadMainSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadMainFail implements Action {\r\n  readonly type = MainActionTypes.LoadMainFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\nexport type MainActions = LoadMain\r\n  | LoadMainSuccess | LoadMainFail;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "MainActionTypes.LoadMain",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMainFail",
            "id": "class-LoadMainFail-0e490eb5a03b711bc390e87734970a22",
            "file": "src/app/pages/products/+state/main/main.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum MainActionTypes {\r\n  LoadMain = '[Main] Load Main',\r\n  LoadMainSuccess = '[Main API] Load Main Success',\r\n  LoadMainFail = '[Main API]  Load Main Fail',\r\n}\r\n\r\nexport class LoadMain implements Action {\r\n  readonly type = MainActionTypes.LoadMain;\r\n}\r\nexport class LoadMainSuccess implements Action {\r\n  readonly type = MainActionTypes.LoadMainSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadMainFail implements Action {\r\n  readonly type = MainActionTypes.LoadMainFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\nexport type MainActions = LoadMain\r\n  | LoadMainSuccess | LoadMainFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MainActionTypes.LoadMainFail",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMainSuccess",
            "id": "class-LoadMainSuccess-0e490eb5a03b711bc390e87734970a22",
            "file": "src/app/pages/products/+state/main/main.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum MainActionTypes {\r\n  LoadMain = '[Main] Load Main',\r\n  LoadMainSuccess = '[Main API] Load Main Success',\r\n  LoadMainFail = '[Main API]  Load Main Fail',\r\n}\r\n\r\nexport class LoadMain implements Action {\r\n  readonly type = MainActionTypes.LoadMain;\r\n}\r\nexport class LoadMainSuccess implements Action {\r\n  readonly type = MainActionTypes.LoadMainSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadMainFail implements Action {\r\n  readonly type = MainActionTypes.LoadMainFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\nexport type MainActions = LoadMain\r\n  | LoadMainSuccess | LoadMainFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MainActionTypes.LoadMainSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadProducts",
            "id": "class-LoadProducts-99c67586a8640e3adce8c016ab498651",
            "file": "src/app/pages/products/+state/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ProductsActionTypes {\r\n  LoadProducts = '[Products Page] Load Products',\r\n  LoadProductsSuccess = '[Products API] Load Products Success',\r\n  LoadProductsFail = '[Products API] LoadProducts Fail',\r\n  UpdateProducts = '[Products Page] Update Products',\r\n  UpdateProductsSuccess = '[Products API] Update Products Success',\r\n  UpdateProductsFail = '[Products API] Update Products Fail',\r\n\r\n  // LoadHeadersButtons = '[Headers Buttons] Load Headers Buttons',\r\n  // LoadHeadersButtonsSuccess = '[Headers Buttons API] Load Headers Buttons Success',\r\n  // LoadHeadersButtonsFail = '[Headers Buttons API]  Load Headers Buttons Fail',\r\n\r\n  // LoadServices = '[Services] Load Services',\r\n  // LoadServicesSuccess = '[Services API] Load Services Success',\r\n  // LoadServicesFail = '[Services API]  Load Services Fail',\r\n\r\n  // LoadImages = '[Images] Load Headers Buttons',\r\n  // LoadImagesSuccess = '[Images API] Load Images Success',\r\n  // LoadImagesFail = '[Images API]  Load Images Fail',\r\n\r\n  // LoadMain = '[Main] Load Main',\r\n  // LoadMainSuccess = '[Main API] Load Main Success',\r\n  // LoadMainFail = '[Main API]  Load Main Fail',\r\n\r\n  // LoadDetails = '[Details] Load  Details',\r\n  // LoadDetailsSuccess = '[Details API] Load Details Success',\r\n  // LoadDetailsFail = '[Details API]  Load Details Fail',\r\n}\r\n\r\nexport class LoadProducts implements Action {\r\n  readonly type = ProductsActionTypes.LoadProducts;\r\n}\r\nexport class LoadProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProducts;\r\n}\r\n\r\n\r\n// export class LoadHeadersButtons implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtons;\r\n// }\r\n// export class LoadHeadersButtonsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadHeadersButtonsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImages implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImages;\r\n// }\r\n// export class LoadImagesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImagesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServices implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServices;\r\n// }\r\n// export class LoadServicesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServicesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMain implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMain;\r\n// }\r\n// export class LoadMainSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMainFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetails implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetails;\r\n// }\r\n// export class LoadDetailsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetailsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n\r\nexport type ProductsActions = LoadProducts\r\n  | LoadProductsSuccess | LoadProductsFail\r\n  | UpdateProductsFail | UpdateProductsSuccess\r\n  | UpdateProducts;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ProductsActionTypes.LoadProducts",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadProductsFail",
            "id": "class-LoadProductsFail-99c67586a8640e3adce8c016ab498651",
            "file": "src/app/pages/products/+state/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ProductsActionTypes {\r\n  LoadProducts = '[Products Page] Load Products',\r\n  LoadProductsSuccess = '[Products API] Load Products Success',\r\n  LoadProductsFail = '[Products API] LoadProducts Fail',\r\n  UpdateProducts = '[Products Page] Update Products',\r\n  UpdateProductsSuccess = '[Products API] Update Products Success',\r\n  UpdateProductsFail = '[Products API] Update Products Fail',\r\n\r\n  // LoadHeadersButtons = '[Headers Buttons] Load Headers Buttons',\r\n  // LoadHeadersButtonsSuccess = '[Headers Buttons API] Load Headers Buttons Success',\r\n  // LoadHeadersButtonsFail = '[Headers Buttons API]  Load Headers Buttons Fail',\r\n\r\n  // LoadServices = '[Services] Load Services',\r\n  // LoadServicesSuccess = '[Services API] Load Services Success',\r\n  // LoadServicesFail = '[Services API]  Load Services Fail',\r\n\r\n  // LoadImages = '[Images] Load Headers Buttons',\r\n  // LoadImagesSuccess = '[Images API] Load Images Success',\r\n  // LoadImagesFail = '[Images API]  Load Images Fail',\r\n\r\n  // LoadMain = '[Main] Load Main',\r\n  // LoadMainSuccess = '[Main API] Load Main Success',\r\n  // LoadMainFail = '[Main API]  Load Main Fail',\r\n\r\n  // LoadDetails = '[Details] Load  Details',\r\n  // LoadDetailsSuccess = '[Details API] Load Details Success',\r\n  // LoadDetailsFail = '[Details API]  Load Details Fail',\r\n}\r\n\r\nexport class LoadProducts implements Action {\r\n  readonly type = ProductsActionTypes.LoadProducts;\r\n}\r\nexport class LoadProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProducts;\r\n}\r\n\r\n\r\n// export class LoadHeadersButtons implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtons;\r\n// }\r\n// export class LoadHeadersButtonsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadHeadersButtonsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImages implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImages;\r\n// }\r\n// export class LoadImagesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImagesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServices implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServices;\r\n// }\r\n// export class LoadServicesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServicesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMain implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMain;\r\n// }\r\n// export class LoadMainSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMainFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetails implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetails;\r\n// }\r\n// export class LoadDetailsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetailsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n\r\nexport type ProductsActions = LoadProducts\r\n  | LoadProductsSuccess | LoadProductsFail\r\n  | UpdateProductsFail | UpdateProductsSuccess\r\n  | UpdateProducts;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductsActionTypes.LoadProductsFail",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadProductsSuccess",
            "id": "class-LoadProductsSuccess-99c67586a8640e3adce8c016ab498651",
            "file": "src/app/pages/products/+state/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ProductsActionTypes {\r\n  LoadProducts = '[Products Page] Load Products',\r\n  LoadProductsSuccess = '[Products API] Load Products Success',\r\n  LoadProductsFail = '[Products API] LoadProducts Fail',\r\n  UpdateProducts = '[Products Page] Update Products',\r\n  UpdateProductsSuccess = '[Products API] Update Products Success',\r\n  UpdateProductsFail = '[Products API] Update Products Fail',\r\n\r\n  // LoadHeadersButtons = '[Headers Buttons] Load Headers Buttons',\r\n  // LoadHeadersButtonsSuccess = '[Headers Buttons API] Load Headers Buttons Success',\r\n  // LoadHeadersButtonsFail = '[Headers Buttons API]  Load Headers Buttons Fail',\r\n\r\n  // LoadServices = '[Services] Load Services',\r\n  // LoadServicesSuccess = '[Services API] Load Services Success',\r\n  // LoadServicesFail = '[Services API]  Load Services Fail',\r\n\r\n  // LoadImages = '[Images] Load Headers Buttons',\r\n  // LoadImagesSuccess = '[Images API] Load Images Success',\r\n  // LoadImagesFail = '[Images API]  Load Images Fail',\r\n\r\n  // LoadMain = '[Main] Load Main',\r\n  // LoadMainSuccess = '[Main API] Load Main Success',\r\n  // LoadMainFail = '[Main API]  Load Main Fail',\r\n\r\n  // LoadDetails = '[Details] Load  Details',\r\n  // LoadDetailsSuccess = '[Details API] Load Details Success',\r\n  // LoadDetailsFail = '[Details API]  Load Details Fail',\r\n}\r\n\r\nexport class LoadProducts implements Action {\r\n  readonly type = ProductsActionTypes.LoadProducts;\r\n}\r\nexport class LoadProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProducts;\r\n}\r\n\r\n\r\n// export class LoadHeadersButtons implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtons;\r\n// }\r\n// export class LoadHeadersButtonsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadHeadersButtonsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImages implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImages;\r\n// }\r\n// export class LoadImagesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImagesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServices implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServices;\r\n// }\r\n// export class LoadServicesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServicesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMain implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMain;\r\n// }\r\n// export class LoadMainSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMainFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetails implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetails;\r\n// }\r\n// export class LoadDetailsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetailsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n\r\nexport type ProductsActions = LoadProducts\r\n  | LoadProductsSuccess | LoadProductsFail\r\n  | UpdateProductsFail | UpdateProductsSuccess\r\n  | UpdateProducts;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductsActionTypes.LoadProductsSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadServices",
            "id": "class-LoadServices-91ac671df3beebc0caf664896d96f158",
            "file": "src/app/pages/products/+state/services/services.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ServicesActionTypes {\r\n   LoadServices = '[Services] Load Services',\r\n  LoadServicesSuccess = '[Services API] Load Services Success',\r\n  LoadServicesFail = '[Services API]  Load Services Fail',\r\n}\r\n\r\nexport class LoadServices implements Action {\r\n    readonly type = ServicesActionTypes.LoadServices;\r\n  }\r\nexport class LoadServicesSuccess implements Action {\r\n    readonly type = ServicesActionTypes.LoadServicesSuccess;\r\n    constructor(public payload: any) { }\r\n  }\r\n\r\nexport class LoadServicesFail implements Action {\r\n    readonly type = ServicesActionTypes.LoadServicesFail;\r\n    constructor(public payload: any) { }\r\n  }\r\n\r\n\r\n\r\nexport type ServicesActions = LoadServices\r\n  | LoadServicesSuccess | LoadServicesFail;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ServicesActionTypes.LoadServices",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadServicesFail",
            "id": "class-LoadServicesFail-91ac671df3beebc0caf664896d96f158",
            "file": "src/app/pages/products/+state/services/services.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ServicesActionTypes {\r\n   LoadServices = '[Services] Load Services',\r\n  LoadServicesSuccess = '[Services API] Load Services Success',\r\n  LoadServicesFail = '[Services API]  Load Services Fail',\r\n}\r\n\r\nexport class LoadServices implements Action {\r\n    readonly type = ServicesActionTypes.LoadServices;\r\n  }\r\nexport class LoadServicesSuccess implements Action {\r\n    readonly type = ServicesActionTypes.LoadServicesSuccess;\r\n    constructor(public payload: any) { }\r\n  }\r\n\r\nexport class LoadServicesFail implements Action {\r\n    readonly type = ServicesActionTypes.LoadServicesFail;\r\n    constructor(public payload: any) { }\r\n  }\r\n\r\n\r\n\r\nexport type ServicesActions = LoadServices\r\n  | LoadServicesSuccess | LoadServicesFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ServicesActionTypes.LoadServicesFail",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadServicesSuccess",
            "id": "class-LoadServicesSuccess-91ac671df3beebc0caf664896d96f158",
            "file": "src/app/pages/products/+state/services/services.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ServicesActionTypes {\r\n   LoadServices = '[Services] Load Services',\r\n  LoadServicesSuccess = '[Services API] Load Services Success',\r\n  LoadServicesFail = '[Services API]  Load Services Fail',\r\n}\r\n\r\nexport class LoadServices implements Action {\r\n    readonly type = ServicesActionTypes.LoadServices;\r\n  }\r\nexport class LoadServicesSuccess implements Action {\r\n    readonly type = ServicesActionTypes.LoadServicesSuccess;\r\n    constructor(public payload: any) { }\r\n  }\r\n\r\nexport class LoadServicesFail implements Action {\r\n    readonly type = ServicesActionTypes.LoadServicesFail;\r\n    constructor(public payload: any) { }\r\n  }\r\n\r\n\r\n\r\nexport type ServicesActions = LoadServices\r\n  | LoadServicesSuccess | LoadServicesFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ServicesActionTypes.LoadServicesSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Login",
            "id": "class-Login-20728f09282ac171390d44897dd4a532",
            "file": "src/app/auth/+state/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { User } from '../data-models/user.d';\nimport { Authenticate } from '../data-models/authenticate.d';\nimport { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  Login = '[Auth Page] Login',\n  LoginSuccess = '[Auth API] Login Success',\n  LoginFail = '[Auth API] Login Fail'\n}\n\nexport class Login implements Action {\n  readonly type = AuthActionTypes.Login;\n  constructor(public payload: Authenticate) {}\n}\nexport class LoginSuccess implements Action {\n  readonly type = AuthActionTypes.LoginSuccess;\n  constructor(public payload: User) {}\n}\n\nexport class LoginFail implements Action {\n  readonly type = AuthActionTypes.LoginFail;\n  constructor(public payload: any) {}\n}\n\nexport type AuthActions = Login | LoginSuccess | LoginFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Authenticate"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Authenticate",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Authenticate",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.Login",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoginFail",
            "id": "class-LoginFail-20728f09282ac171390d44897dd4a532",
            "file": "src/app/auth/+state/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { User } from '../data-models/user.d';\nimport { Authenticate } from '../data-models/authenticate.d';\nimport { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  Login = '[Auth Page] Login',\n  LoginSuccess = '[Auth API] Login Success',\n  LoginFail = '[Auth API] Login Fail'\n}\n\nexport class Login implements Action {\n  readonly type = AuthActionTypes.Login;\n  constructor(public payload: Authenticate) {}\n}\nexport class LoginSuccess implements Action {\n  readonly type = AuthActionTypes.LoginSuccess;\n  constructor(public payload: User) {}\n}\n\nexport class LoginFail implements Action {\n  readonly type = AuthActionTypes.LoginFail;\n  constructor(public payload: any) {}\n}\n\nexport type AuthActions = Login | LoginSuccess | LoginFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LoginFail",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoginSuccess",
            "id": "class-LoginSuccess-20728f09282ac171390d44897dd4a532",
            "file": "src/app/auth/+state/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { User } from '../data-models/user.d';\nimport { Authenticate } from '../data-models/authenticate.d';\nimport { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  Login = '[Auth Page] Login',\n  LoginSuccess = '[Auth API] Login Success',\n  LoginFail = '[Auth API] Login Fail'\n}\n\nexport class Login implements Action {\n  readonly type = AuthActionTypes.Login;\n  constructor(public payload: Authenticate) {}\n}\nexport class LoginSuccess implements Action {\n  readonly type = AuthActionTypes.LoginSuccess;\n  constructor(public payload: User) {}\n}\n\nexport class LoginFail implements Action {\n  readonly type = AuthActionTypes.LoginFail;\n  constructor(public payload: any) {}\n}\n\nexport type AuthActions = Login | LoginSuccess | LoginFail;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LoginSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProducts",
            "id": "class-UpdateProducts-99c67586a8640e3adce8c016ab498651",
            "file": "src/app/pages/products/+state/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ProductsActionTypes {\r\n  LoadProducts = '[Products Page] Load Products',\r\n  LoadProductsSuccess = '[Products API] Load Products Success',\r\n  LoadProductsFail = '[Products API] LoadProducts Fail',\r\n  UpdateProducts = '[Products Page] Update Products',\r\n  UpdateProductsSuccess = '[Products API] Update Products Success',\r\n  UpdateProductsFail = '[Products API] Update Products Fail',\r\n\r\n  // LoadHeadersButtons = '[Headers Buttons] Load Headers Buttons',\r\n  // LoadHeadersButtonsSuccess = '[Headers Buttons API] Load Headers Buttons Success',\r\n  // LoadHeadersButtonsFail = '[Headers Buttons API]  Load Headers Buttons Fail',\r\n\r\n  // LoadServices = '[Services] Load Services',\r\n  // LoadServicesSuccess = '[Services API] Load Services Success',\r\n  // LoadServicesFail = '[Services API]  Load Services Fail',\r\n\r\n  // LoadImages = '[Images] Load Headers Buttons',\r\n  // LoadImagesSuccess = '[Images API] Load Images Success',\r\n  // LoadImagesFail = '[Images API]  Load Images Fail',\r\n\r\n  // LoadMain = '[Main] Load Main',\r\n  // LoadMainSuccess = '[Main API] Load Main Success',\r\n  // LoadMainFail = '[Main API]  Load Main Fail',\r\n\r\n  // LoadDetails = '[Details] Load  Details',\r\n  // LoadDetailsSuccess = '[Details API] Load Details Success',\r\n  // LoadDetailsFail = '[Details API]  Load Details Fail',\r\n}\r\n\r\nexport class LoadProducts implements Action {\r\n  readonly type = ProductsActionTypes.LoadProducts;\r\n}\r\nexport class LoadProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProducts;\r\n}\r\n\r\n\r\n// export class LoadHeadersButtons implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtons;\r\n// }\r\n// export class LoadHeadersButtonsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadHeadersButtonsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImages implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImages;\r\n// }\r\n// export class LoadImagesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImagesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServices implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServices;\r\n// }\r\n// export class LoadServicesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServicesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMain implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMain;\r\n// }\r\n// export class LoadMainSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMainFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetails implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetails;\r\n// }\r\n// export class LoadDetailsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetailsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n\r\nexport type ProductsActions = LoadProducts\r\n  | LoadProductsSuccess | LoadProductsFail\r\n  | UpdateProductsFail | UpdateProductsSuccess\r\n  | UpdateProducts;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ProductsActionTypes.UpdateProducts",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProductsFail",
            "id": "class-UpdateProductsFail-99c67586a8640e3adce8c016ab498651",
            "file": "src/app/pages/products/+state/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ProductsActionTypes {\r\n  LoadProducts = '[Products Page] Load Products',\r\n  LoadProductsSuccess = '[Products API] Load Products Success',\r\n  LoadProductsFail = '[Products API] LoadProducts Fail',\r\n  UpdateProducts = '[Products Page] Update Products',\r\n  UpdateProductsSuccess = '[Products API] Update Products Success',\r\n  UpdateProductsFail = '[Products API] Update Products Fail',\r\n\r\n  // LoadHeadersButtons = '[Headers Buttons] Load Headers Buttons',\r\n  // LoadHeadersButtonsSuccess = '[Headers Buttons API] Load Headers Buttons Success',\r\n  // LoadHeadersButtonsFail = '[Headers Buttons API]  Load Headers Buttons Fail',\r\n\r\n  // LoadServices = '[Services] Load Services',\r\n  // LoadServicesSuccess = '[Services API] Load Services Success',\r\n  // LoadServicesFail = '[Services API]  Load Services Fail',\r\n\r\n  // LoadImages = '[Images] Load Headers Buttons',\r\n  // LoadImagesSuccess = '[Images API] Load Images Success',\r\n  // LoadImagesFail = '[Images API]  Load Images Fail',\r\n\r\n  // LoadMain = '[Main] Load Main',\r\n  // LoadMainSuccess = '[Main API] Load Main Success',\r\n  // LoadMainFail = '[Main API]  Load Main Fail',\r\n\r\n  // LoadDetails = '[Details] Load  Details',\r\n  // LoadDetailsSuccess = '[Details API] Load Details Success',\r\n  // LoadDetailsFail = '[Details API]  Load Details Fail',\r\n}\r\n\r\nexport class LoadProducts implements Action {\r\n  readonly type = ProductsActionTypes.LoadProducts;\r\n}\r\nexport class LoadProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProducts;\r\n}\r\n\r\n\r\n// export class LoadHeadersButtons implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtons;\r\n// }\r\n// export class LoadHeadersButtonsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadHeadersButtonsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImages implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImages;\r\n// }\r\n// export class LoadImagesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImagesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServices implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServices;\r\n// }\r\n// export class LoadServicesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServicesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMain implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMain;\r\n// }\r\n// export class LoadMainSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMainFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetails implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetails;\r\n// }\r\n// export class LoadDetailsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetailsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n\r\nexport type ProductsActions = LoadProducts\r\n  | LoadProductsSuccess | LoadProductsFail\r\n  | UpdateProductsFail | UpdateProductsSuccess\r\n  | UpdateProducts;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductsActionTypes.UpdateProductsFail",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProductsSuccess",
            "id": "class-UpdateProductsSuccess-99c67586a8640e3adce8c016ab498651",
            "file": "src/app/pages/products/+state/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum ProductsActionTypes {\r\n  LoadProducts = '[Products Page] Load Products',\r\n  LoadProductsSuccess = '[Products API] Load Products Success',\r\n  LoadProductsFail = '[Products API] LoadProducts Fail',\r\n  UpdateProducts = '[Products Page] Update Products',\r\n  UpdateProductsSuccess = '[Products API] Update Products Success',\r\n  UpdateProductsFail = '[Products API] Update Products Fail',\r\n\r\n  // LoadHeadersButtons = '[Headers Buttons] Load Headers Buttons',\r\n  // LoadHeadersButtonsSuccess = '[Headers Buttons API] Load Headers Buttons Success',\r\n  // LoadHeadersButtonsFail = '[Headers Buttons API]  Load Headers Buttons Fail',\r\n\r\n  // LoadServices = '[Services] Load Services',\r\n  // LoadServicesSuccess = '[Services API] Load Services Success',\r\n  // LoadServicesFail = '[Services API]  Load Services Fail',\r\n\r\n  // LoadImages = '[Images] Load Headers Buttons',\r\n  // LoadImagesSuccess = '[Images API] Load Images Success',\r\n  // LoadImagesFail = '[Images API]  Load Images Fail',\r\n\r\n  // LoadMain = '[Main] Load Main',\r\n  // LoadMainSuccess = '[Main API] Load Main Success',\r\n  // LoadMainFail = '[Main API]  Load Main Fail',\r\n\r\n  // LoadDetails = '[Details] Load  Details',\r\n  // LoadDetailsSuccess = '[Details API] Load Details Success',\r\n  // LoadDetailsFail = '[Details API]  Load Details Fail',\r\n}\r\n\r\nexport class LoadProducts implements Action {\r\n  readonly type = ProductsActionTypes.LoadProducts;\r\n}\r\nexport class LoadProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LoadProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.LoadProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsSuccess implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsSuccess;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateProductsFail implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProductsFail;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = ProductsActionTypes.UpdateProducts;\r\n}\r\n\r\n\r\n// export class LoadHeadersButtons implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtons;\r\n// }\r\n// export class LoadHeadersButtonsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadHeadersButtonsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadHeadersButtonsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImages implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImages;\r\n// }\r\n// export class LoadImagesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadImagesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadImagesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServices implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServices;\r\n// }\r\n// export class LoadServicesSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadServicesFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadServicesFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMain implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMain;\r\n// }\r\n// export class LoadMainSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadMainFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadMainFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetails implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetails;\r\n// }\r\n// export class LoadDetailsSuccess implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsSuccess;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n// export class LoadDetailsFail implements Action {\r\n//   readonly type = ProductsActionTypes.LoadDetailsFail;\r\n//   constructor(public payload: any) { }\r\n// }\r\n\r\n\r\nexport type ProductsActions = LoadProducts\r\n  | LoadProductsSuccess | LoadProductsFail\r\n  | UpdateProductsFail | UpdateProductsSuccess\r\n  | UpdateProducts;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ProductsActionTypes.UpdateProductsSuccess",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4aa29d2f818e75146153067976a81485",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'assignments-angular'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'assignments-angular';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div style=\"margin-top: 20px;\">\n    <router-outlet></router-outlet>\n</div>"
        },
        {
            "name": "DetailsComponent",
            "id": "component-DetailsComponent-ae7ee7d0b0c831998791bbc1e3245f8e",
            "file": "src/app/layout/details/details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "details",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'app-details',\r\n    templateUrl: './details.component.html'\r\n})\r\nexport class DetailsComponent implements OnInit{\r\n    @Input() details: any = [];\r\n\r\n    ngOnInit(): void {\r\n        console.log(this.details);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<header class=\"showcase\">\r\n    <h1>{{details[0]?.text}}</h1>\r\n    <p>{{ details[0]?.details}}</p>\r\n    <a href=\"#\" class=\"btn\">Read More</a>\r\n</header>"
        },
        {
            "name": "HeaderLayout2Component",
            "id": "component-HeaderLayout2Component-a68c11f8d6cebee2a64e2e28f3a45a0d",
            "file": "src/app/layout/header-layout-2/header-layout-2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-layout-2",
            "styleUrls": [
                "./header-layout-2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-layout-2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "headerButtons",
                    "defaultValue": "[]",
                    "line": 11,
                    "type": "any"
                },
                {
                    "name": "isAuthenticated",
                    "line": 12,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'app-header-layout-2',\r\n    templateUrl: './header-layout-2.component.html',\r\n    styleUrls: ['./header-layout-2.component.scss']\r\n})\r\nexport class HeaderLayout2Component {\r\n    @Input() headerButtons: any = [];\r\n    @Input() isAuthenticated: boolean;\r\n    goToLogin(): void{\r\n        console.log('here');\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header-layout-2.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<!-- Navigation -->\r\n<nav class=\"main-nav\">\r\n    <ul>\r\n        <li *ngFor=\"let data of headerButtons\">\r\n            <div *ngIf=\"isAuthenticated; then doSomething; else doSomethingElse;\"></div>\r\n            <ng-template #doSomething>\r\n                <ng-container *ngIf=\"data.text !== 'Login'\">\r\n                    <a href=\"#\">{{data.text}}</a>\r\n                </ng-container>\r\n            </ng-template>\r\n            <ng-template #doSomethingElse>\r\n                <ng-container *ngIf=\"data.text === 'Login'\">\r\n                    <a routerLink=\"/user/login\">{{data.text}}</a>\r\n                </ng-container>\r\n            </ng-template>\r\n        </li>\r\n    </ul>\r\n</nav>"
        },
        {
            "name": "HeaderLayoutComponent",
            "id": "component-HeaderLayoutComponent-0d9a91272264457636814369af889f05",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "headerDetails",
                    "line": 11,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "toggleButtonName",
                    "defaultValue": "'Dark Theme'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ThemeService } from './../../theme/theme.service';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'app-header',\r\n    templateUrl: './header.component.html',\r\n    styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderLayoutComponent implements OnInit{\r\n    @Input() headerDetails: any;\r\n    toggleButtonName = 'Dark Theme';\r\n\r\n    constructor(private themeService: ThemeService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.toggleTheme();\r\n    }\r\n\r\n    toggleTheme(): void {\r\n        if (this.themeService.isDarkTheme()) {\r\n            this.toggleButtonName = 'Dark Theme';\r\n            this.themeService.setLightTheme();\r\n        } else {\r\n            this.toggleButtonName = 'Light Theme';\r\n            this.themeService.setDarkTheme();\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    overflow: hidden;\r\n    background-color: #f1f1f1;\r\n    padding: 20px 10px;\r\n}\r\n\r\n.header a {\r\n    float: left;\r\n    color: black;\r\n    text-align: center;\r\n    padding: 12px;\r\n    text-decoration: none;\r\n    font-size: 18px;\r\n    line-height: 25px;\r\n    border-radius: 4px;\r\n}\r\n\r\n.header a.logo {\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n}\r\n\r\n.header a:hover {\r\n    background-color: #ddd;\r\n    color: black;\r\n}\r\n\r\n.header a.active {\r\n    background-color: dodgerblue;\r\n    color: white;\r\n}\r\n\r\n.header-right {\r\n    float: right;\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n    .header a {\r\n        float: none;\r\n        display: block;\r\n        text-align: left;\r\n    }\r\n    .header-right {\r\n        float: none;\r\n    }\r\n}\r\n\r\n.text-togglebutton {\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\">\r\n    <a href=\"#default\" class=\"logo\">{{headerDetails.page}}</a>\r\n    <div class=\"header-right\">\r\n        <a class=\"active\" (click)=\"toggleTheme()\"> <span class=\"text-togglebutton\"> {{ toggleButtonName }}</span></a>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ImageComponent",
            "id": "component-ImageComponent-160cecd49444604bd732d92a6d4b4d50",
            "file": "src/app/layout/images/images.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-images",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./images.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'app-images',\r\n    templateUrl: './images.component.html'\r\n})\r\nexport class ImageComponent {\r\n    @Input() images: any = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<section class=\"portfolio\">\r\n    <ng-container *ngFor=\"let data of images\">\r\n        <img [src]=\"data.url\" alt=\"sushil\" border=\"0\" />\r\n    </ng-container>\r\n</section>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-3f31bda05d42ab89e112c1b479b8fa4e",
            "file": "src/app/auth/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authenticate",
                    "type": "Authenticate",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "headerButtons$",
                    "type": "Observable<HeaderButtons[]>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\r\n    username: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required])\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AuthService } from './../../service/auth.service';\r\nimport { getAuthState } from './../../+state/index';\r\nimport { LoadHeadersButtons } from './../../../pages/products/+state/headers-button/headers-button.actions';\r\nimport { HeadersButtonState } from './../../../pages/products/+state/headers-button/headers-button.reducer';\r\nimport { Observable } from 'rxjs';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AuthState } from './../../+state/auth.reducer';\r\nimport { Authenticate } from '../../data-models/authenticate';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport * as authActions from './../../+state/auth.actions';\r\nimport { HeaderButtons } from '../../data-models';\r\nimport { getHeaderButtons } from 'src/app/pages/products/+state/headers-button';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  authenticate: Authenticate;\r\n  isAuthenticated = false;\r\n  headerButtons$: Observable<HeaderButtons[]>;\r\n  getState: Observable<any>;\r\n  loginForm = new FormGroup({\r\n    username: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required])\r\n  });\r\n\r\n  constructor(\r\n    private store: Store<AuthState>,\r\n    private authService: AuthService\r\n  )\r\n  // tslint:disable-next-line: no-trailing-whitespace\r\n  {\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.authService.checkAuthentication();\r\n  }\r\n\r\n  // tslint:disable-next-line: typedef\r\n  login() {\r\n    // dispatch login data into store\r\n    this.store.dispatch(new authActions.Login({\r\n      username: this.loginForm.value.username,\r\n      password: this.loginForm.value.password\r\n    } as Authenticate));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    overflow: hidden;\r\n    background-color: #f1f1f1;\r\n    padding: 20px 10px;\r\n}\r\n\r\n.header a {\r\n    float: left;\r\n    color: black;\r\n    text-align: center;\r\n    padding: 12px;\r\n    text-decoration: none;\r\n    font-size: 18px;\r\n    line-height: 25px;\r\n    border-radius: 4px;\r\n}\r\n\r\n.header a.logo {\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n}\r\n\r\n.header a:hover {\r\n    background-color: #ddd;\r\n    color: black;\r\n}\r\n\r\n.header a.active {\r\n    background-color: dodgerblue;\r\n    color: white;\r\n}\r\n\r\n.header-right {\r\n    float: right;\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n    .header a {\r\n        float: none;\r\n        display: block;\r\n        text-align: left;\r\n    }\r\n    .header-right {\r\n        float: none;\r\n    }\r\n}\r\n\r\ninput[type=text],\r\ninput[type=password],\r\nselect,\r\ntextarea {\r\n    width: 100%;\r\n    padding: 12px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    margin-top: 6px;\r\n    margin-bottom: 16px;\r\n    resize: vertical;\r\n}\r\n\r\ninput[type=submit] {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    padding: 12px 20px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n}\r\n\r\ninput[type=submit]:hover {\r\n    background-color: #45a049;\r\n}\r\n\r\n.container {\r\n    border-radius: 5px;\r\n    background-color: #f2f2f2;\r\n    padding: 20px;\r\n}\r\n\r\n.required:after {\r\n    content: \" *\";\r\n    color: red;\r\n}\r\n\r\n.button {\r\n    background-color: #4CAF50;\r\n    border: none;\r\n    color: white;\r\n    padding: 15px 32px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 4px 2px;\r\n    cursor: pointer;\r\n    // float: right;\r\n}\r\n\r\n.button-primary {\r\n    background-color: white;\r\n    border: none;\r\n    color: white;\r\n    padding: 15px 32px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    color: black;\r\n    margin: 4px 2px;\r\n    cursor: pointer;\r\n    // float: right;\r\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AuthState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\" margin-medium\">\r\n    <div class=\"container\">\r\n        <form [formGroup]=\"loginForm\">\r\n            <label for=\"text\" class=\"required\">Username</label>\r\n            <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username.\" formControlName=\"username\"> <label for=\"text\" class=\"required\">Password</label>\r\n            <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password.\" formControlName=\"password\">\r\n            <button class=\"button\" (click)=\"login()\" [disabled]=\"!loginForm.valid\">Submit</button>\r\n            <button class=\"button-primary\" routerLink=\"/product/main2\">Cancel</button>\r\n        </form>\r\n    </div>\r\n</div>"
        },
        {
            "name": "MainDetailsComponent",
            "id": "component-MainDetailsComponent-2b4a7a1d2bef6880a6bddf7a4b46292c",
            "file": "src/app/layout/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "main",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'app-main',\r\n    templateUrl: './main.component.html'\r\n})\r\nexport class MainDetailsComponent {\r\n    @Input() main: any = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<section class=\"info\">\r\n    <img src=\"https://i.ibb.co/mFHq21Y/header.jpg\" alt=\"\">\r\n    <div>\r\n        <h2>{{ main[0]?.text }}</h2>\r\n        <p>{{main[0]?.details }}</p>\r\n        <a href=\"#\" class=\"btn\">Learn More</a>\r\n    </div>\r\n</section>"
        },
        {
            "name": "Product2Component",
            "id": "component-Product2Component-2563ffee5b5f7c0d97a00e87aaf21a91",
            "file": "src/app/pages/products/main-layout-2/main-layout-2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-main",
            "styleUrls": [
                "./main-layout-2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-layout-2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "details$",
                    "type": "Observable<Details[]>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "headerButtons$",
                    "type": "Observable<HeaderButtons[]>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "headerDetails",
                    "defaultValue": "{\r\n        page: 'Product List'\r\n    }",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "images$",
                    "type": "Observable<Image[]>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "main$",
                    "type": "Observable<Main[]>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "products$",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "service$",
                    "type": "Observable<Service[]>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "user$",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AuthService } from './../../../auth/service/auth.service';\r\nimport { LoginSuccess } from './../../../auth/+state/auth.actions';\r\nimport { User } from './../../../auth/data-models/user.d';\r\nimport { getUser } from './../../../auth/+state/index';\r\n\r\nimport { LoadMain } from './../+state/main/main.actions';\r\nimport { LoadServices } from './../+state/services/services.actions';\r\nimport { Service } from './../../../auth/data-models/service.d';\r\nimport { Details } from '../../../auth/data-models/details';\r\nimport { Router } from '@angular/router';\r\nimport { getProducts } from './../+state/index';\r\nimport { getHeaderButtons } from './../+state/headers-button/index';\r\nimport { getImages } from './../+state/images/index';\r\nimport { getDetails } from './../+state/details/index';\r\nimport { getMain } from './../+state/main/index';\r\nimport { getService } from './../+state/services/index';\r\nimport { getAuthState } from '../../../auth/+state/index';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { LoadProducts } from './../+state/products.actions';\r\nimport { LoadImages } from './../+state/images/images.actions';\r\nimport { LoadDetails } from './../+state/details/details.actions';\r\nimport { LoadHeadersButtons } from './../+state/headers-button/headers-button.actions';\r\nimport { AuthState } from './../../../auth/+state/auth.reducer';\r\nimport { ProductsService } from './../services/products/products.service';\r\nimport { ProductsState } from './../+state/products.reducer';\r\nimport { HeadersButtonState } from './../+state/headers-button/headers-button.reducer';\r\nimport { ImagesState } from './../+state/images/images.reducer';\r\nimport { MainState } from './../+state/main/main.reducer';\r\nimport { DetailsState } from './../+state/details/details.reducer';\r\nimport { ServiceData, ServiceState } from './../+state/services/services.reducer';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { HeaderButtons, Product } from './../../../auth/data-models';\r\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Image } from 'src/app/auth/data-models/image';\r\nimport { Main } from 'src/app/auth/data-models/main';\r\n@Component({\r\n    selector: 'app-product-main',\r\n    templateUrl: './main-layout-2.component.html',\r\n    styleUrls: ['./main-layout-2.component.scss']\r\n})\r\nexport class Product2Component implements OnInit {\r\n    public headerDetails: any = {\r\n        page: 'Product List'\r\n    };\r\n    products$: Observable<Product[]>;\r\n    images$: Observable<Image[]>;\r\n    details$: Observable<Details[]>;\r\n    main$: Observable<Main[]>;\r\n    service$: Observable<Service[]>;\r\n    headerButtons$: Observable<HeaderButtons[]>;\r\n    getState: Observable<any>;\r\n    user$: Observable<User>;\r\n    isAuthenticated = false;\r\n\r\n    constructor(private store: Store<ProductsState>,\r\n                private storeHeaderButton: Store<HeadersButtonState>,\r\n                private storeImages: Store<ImagesState>,\r\n                private storeDetails: Store<DetailsState>,\r\n                private storeMain: Store<MainState>,\r\n                private storeService: Store<ServiceState>,\r\n                private authStore: Store<AuthState>,\r\n                private authService: AuthService\r\n    ) {\r\n        this.user$ = this.authStore.select(getUser);\r\n        this.isAuthenticated = this.authService.checkAuthentication();\r\n    }\r\n    ngOnInit(): void {\r\n\r\n        this.storeHeaderButton.dispatch(new LoadHeadersButtons());\r\n        this.headerButtons$ = this.storeHeaderButton.pipe(select(getHeaderButtons));\r\n\r\n        this.storeImages.dispatch(new LoadImages());\r\n        this.images$ = this.storeImages.pipe(select(getImages));\r\n\r\n        this.storeDetails.dispatch(new LoadDetails());\r\n        this.details$ = this.storeDetails.pipe(select(getDetails));\r\n\r\n        this.storeMain.dispatch(new LoadMain());\r\n        this.main$ = this.storeMain.pipe(select(getMain));\r\n\r\n        this.storeService.dispatch(new LoadServices());\r\n        this.service$ = this.storeService.pipe(select(getService));\r\n\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-layout-2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<ProductsState>"
                    },
                    {
                        "name": "storeHeaderButton",
                        "type": "Store<HeadersButtonState>"
                    },
                    {
                        "name": "storeImages",
                        "type": "Store<ImagesState>"
                    },
                    {
                        "name": "storeDetails",
                        "type": "Store<DetailsState>"
                    },
                    {
                        "name": "storeMain",
                        "type": "Store<MainState>"
                    },
                    {
                        "name": "storeService",
                        "type": "Store<ServiceState>"
                    },
                    {
                        "name": "authStore",
                        "type": "Store<AuthState>"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<ProductsState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeHeaderButton",
                        "type": "Store<HeadersButtonState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeImages",
                        "type": "Store<ImagesState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeDetails",
                        "type": "Store<DetailsState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeMain",
                        "type": "Store<MainState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeService",
                        "type": "Store<ServiceState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authStore",
                        "type": "Store<AuthState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\r\n    <app-header-layout-2 [headerButtons]=\"headerButtons$ | async\" [isAuthenticated]=\"isAuthenticated\"></app-header-layout-2>\r\n    <!-- Top Container -->\r\n    <!-- <section class=\"top-container\"> -->\r\n    <!-- <app-services></app-services> -->\r\n    <!-- <header class=\"showcase\">\r\n            <h1>Your Web Presence</h1>\r\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Modi, ipsam! Nihil quo minima nulla atque!</p>\r\n            <a href=\"#\" class=\"btn\">Read More</a>\r\n        </header> -->\r\n    <app-details [details]=\"details$ | async\"></app-details>\r\n    <!-- </section> -->\r\n\r\n    <!-- Boxes Section -->\r\n    <!-- <section class=\"boxes\"> -->\r\n    <!-- <div class=\"box\">\r\n            <i class=\"fas fa-chart-pie fa-4x\"></i>\r\n            <h3>Analytics</h3>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quasi, expedita?</p>\r\n        </div>\r\n        <div class=\"box\">\r\n            <i class=\"fas fa-globe fa-4x\"></i>\r\n            <h3>Marketing</h3>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quasi, expedita?</p>\r\n        </div>\r\n        <div class=\"box\">\r\n            <i class=\"fas fa-cog fa-4x\"></i>\r\n            <h3>Development</h3>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quasi, expedita?</p>\r\n        </div>\r\n        <div class=\"box\">\r\n            <i class=\"fas fa-users fa-4x\"></i>\r\n            <h3>Support</h3>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quasi, expedita?</p>\r\n        </div> -->\r\n\r\n    <app-services [service]=\"service$| async\"></app-services>\r\n    <!-- </section> -->\r\n\r\n    <!-- Info Section -->\r\n    <!-- <section class=\"info\"> -->\r\n    <!-- <img src=\"https://i.ibb.co/mFHq21Y/header.jpg\" alt=\"\">\r\n        <div>\r\n            <h2>Your Business On The Web</h2>\r\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae alias reiciendis deleniti possimus nemo non repellendus? Quae atque vero modi quidem! Autem cupiditate fugit doloribus ad amet, asperiores provident commodi.</p>\r\n            <a href=\"#\" class=\"btn\">Learn More</a>\r\n        </div> -->\r\n    <app-main [main]=\"main$ | async\"></app-main>\r\n    <!-- </section> -->\r\n\r\n    <!-- Portfolio -->\r\n    <!-- <section class=\"portfolio\"> -->\r\n    <app-images [images]=\"images$ | async\"></app-images>\r\n    <!-- <img src=\"https://i.ibb.co/c12j7xf/sushil.jpg\" alt=\"sushil\" border=\"0\" />\r\n        <img src=\"https://i.ibb.co/7k0cJXs/ab.jpg\" alt=\"ab\" border=\"0\" />\r\n        <img src=\"https://i.ibb.co/J31P1q5/app-image.png\" alt=\"app-image\" border=\"0\" />\r\n        <img src=\"https://i.ibb.co/dbMDwbV/app-image2.png\" alt=\"app-image2\" border=\"0\" />\r\n        <img src=\"https://i.ibb.co/qMWScsW/cta-bg.jpg\" alt=\"cta-bg\" border=\"0\" />\r\n        <img src=\"https://i.ibb.co/gPq6b5v/gym.jpg\" alt=\"gym\" border=\"0\" />\r\n        <img src=\"https://i.ibb.co/2Y5LgrF/gym1.jpg\" alt=\"gym1\" border=\"0\" />\r\n        <img src=\"https://i.ibb.co/mFHq21Y/header.jpg\" alt=\"header\" border=\"0\" />\r\n        <img src=\"https://i.ibb.co/WHhMG3f/i-Phone-app.png\" alt=\"i-Phone-app\" border=\"0\" />\r\n        <img src=\"https://i.ibb.co/M7t8szf/baseball.jpg\" alt=\"baseball\" border=\"0\">\r\n        <img src=\"https://i.ibb.co/PtP2y3C/rogers.jpg\" alt=\"rogers\" border=\"0\">\r\n        <img src=\"https://i.ibb.co/bm9Wg7v/ronaldo.jpg\" alt=\"ronaldo\" border=\"0\">\r\n        <img src=\"https://i.ibb.co/6WNWWt5/Sports-Shop.jpg\" alt=\"Sports-Shop\" border=\"0\">\r\n        <img src=\"https://i.ibb.co/PQqrsVk/Sports-Stores-01.jpg\" alt=\"Sports-Stores-01\" border=\"0\"> -->\r\n    <!-- </section> -->\r\n\r\n    <!-- Footer -->\r\n    <footer>\r\n        <p>Krishna &copy; 2020</p>\r\n    </footer>\r\n\r\n</div>\r\n<!-- Wrapper Ends -->"
        },
        {
            "name": "ProductAddEditComponent",
            "id": "component-ProductAddEditComponent-17bd8b8cf008cc24f4ae26ac90addfb3",
            "file": "src/app/pages/products/product-add-edit/product-add-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-add-edit",
            "styleUrls": [
                "./product-add-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product-add-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "editProductForm",
                    "defaultValue": "new FormGroup({\n    text: new FormControl('', [Validators.required]),\n    summary: new FormControl('', [Validators.required])\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "headerDetails",
                    "defaultValue": "{\n    page: 'Product Edit'\n  }",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "products$",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "routeId",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "updateForm",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "patchForm",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport * as _ from 'lodash';\nimport { Store, select } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\nimport { Product } from './../../../auth/data-models';\nimport { UpdateProductsSuccess } from './../+state/products.actions';\nimport { ProductsService } from './../services/products/products.service';\nimport { ProductsState } from './../+state/products.reducer';\nimport { getProducts } from './../+state/index';\n\nimport { LoadProducts } from './../+state/products.actions';\n\n@Component({\n  selector: 'app-product-add-edit',\n  templateUrl: './product-add-edit.component.html',\n  styleUrls: ['./product-add-edit.component.css']\n})\nexport class ProductAddEditComponent implements OnInit {\n  public headerDetails: any = {\n    page: 'Product Edit'\n  };\n  public data: any = {};\n  // public editData: any = {};\n  updateForm: any = {};\n  routeId;\n  products$: Observable<Product[]>;\n  editProductForm = new FormGroup({\n    text: new FormControl('', [Validators.required]),\n    summary: new FormControl('', [Validators.required])\n  });\n\n  constructor(private store: Store<ProductsState>,\n              private productService: ProductsService,\n              private route: ActivatedRoute) {\n\n    this.routeId = this.route.snapshot.params.id;\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(new LoadProducts());\n    this.products$ = this.store.pipe(select(getProducts));\n    this.products$.subscribe(\n      (data) => {\n        const index = _.findIndex(data, { id: + this.routeId });\n        if (index !== -1) {\n          this.patchForm(data[index]);\n        }\n      }\n    );\n  }\n\n  // tslint:disable-next-line: typedef\n  patchForm(data: any) {\n    this.editProductForm.patchValue({\n      text: data.text,\n      summary: data.summary\n    });\n  }\n\n  updateProduct(): void {\n    this.updateForm = {\n      text: this.editProductForm.value.text,\n      summary: this.editProductForm.value.summary,\n      class: this.data.class,\n      maintext: this.data.maintext,\n      'section-class': this.data['section-class'],\n      id: this.data.id\n    };\n    const update: Update<Product> = this.updateForm;\n    this.store.dispatch(new UpdateProductsSuccess(update));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input[type=text],\r\nselect,\r\ntextarea {\r\n    width: 100%;\r\n    padding: 12px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    margin-top: 6px;\r\n    margin-bottom: 16px;\r\n    resize: vertical;\r\n}\r\n\r\ninput[type=submit] {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    padding: 12px 20px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n}\r\n\r\ninput[type=submit]:hover {\r\n    background-color: #45a049;\r\n}\r\n\r\n.container {\r\n    border-radius: 5px;\r\n    background-color: #f2f2f2;\r\n    padding: 20px;\r\n}\r\n\r\n.required:after {\r\n    content: \" *\";\r\n    color: red;\r\n}",
                    "styleUrl": "./product-add-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<ProductsState>"
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<ProductsState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header [headerDetails]=\"headerDetails\"></app-header>\n\n<div class=\" margin-medium\">\n    <div class=\"container\">\n        <form [formGroup]=\"editProductForm\">\n\n            <label for=\"text\" class=\"required\">Text</label>\n            <input type=\"text\" id=\"text\" name=\"text\" placeholder=\"Small Text..\" formControlName=\"text\">\n\n            <label for=\"summary\" class=\"required\">Summary</label>\n            <textarea formControlName=\"summary\" id=\"summary\" name=\"summary\" placeholder=\"Write something..\" style=\"height:200px\"></textarea>\n            <button class=\"btn btn-primary\" (click)=\"updateProduct()\" [disabled]=\"!editProductForm.valid\">Submit</button>\n        </form>\n    </div>\n</div>"
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-d48cb9467b325f353488d99bd214349f",
            "file": "src/app/pages/products/product-list/product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-list",
            "styleUrls": [
                "./product-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "headerDetails",
                    "defaultValue": "{\n     page: 'Product List'\n  }",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "products$",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "editProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Router } from '@angular/router';\nimport { getProducts } from './../+state/index';\nimport { Observable } from 'rxjs';\nimport { LoadProducts } from './../+state/products.actions';\nimport { AuthState } from './../../../auth/+state/auth.reducer';\nimport { ProductsService } from './../services/products/products.service';\nimport { ProductsState } from './../+state/products.reducer';\nimport { Store, select } from '@ngrx/store';\nimport { Product } from './../../../auth/data-models';\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n  public headerDetails: any = {\n     page: 'Product List'\n  };\n  products$: Observable<Product[]>;\n  headers: any = [];\n\nconstructor( private store: Store<ProductsState>,\n             private productsService: ProductsService,\n             private router: Router,\n             private authStore: Store<AuthState>){\n                this.headers = ['Header', 'Summary', 'Text', 'Edit'];\n\n}\n ngOnInit(): void {\n    this.store.dispatch(new LoadProducts());\n    this.products$ = this.store.pipe(select(getProducts));\n  }\n\n  editProduct(product: Product): any{\n    this.router.navigate(['/product/edit/' + product.id ]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "    .header {\r\n        overflow: hidden;\r\n        background-color: #f1f1f1;\r\n        padding: 20px 10px;\r\n    }\r\n    \r\n    .header a {\r\n        float: left;\r\n        color: black;\r\n        text-align: center;\r\n        padding: 12px;\r\n        text-decoration: none;\r\n        font-size: 18px;\r\n        line-height: 25px;\r\n        border-radius: 4px;\r\n    }\r\n    \r\n    .header a.logo {\r\n        font-size: 25px;\r\n        font-weight: bold;\r\n    }\r\n    \r\n    .header a:hover {\r\n        background-color: #ddd;\r\n        color: black;\r\n    }\r\n    \r\n    .header a.active {\r\n        background-color: dodgerblue;\r\n        color: white;\r\n    }\r\n    \r\n    .header-right {\r\n        float: right;\r\n    }\r\n    \r\n    @media screen and (max-width: 500px) {\r\n        .header a {\r\n            float: none;\r\n            display: block;\r\n            text-align: left;\r\n        }\r\n        .header-right {\r\n            float: none;\r\n        }\r\n    }\r\n    \r\n    #customers {\r\n        font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n        border-collapse: collapse;\r\n        width: 100%;\r\n    }\r\n    \r\n    #customers td,\r\n    #customers th {\r\n        border: 1px solid #ddd;\r\n        padding: 8px;\r\n    }\r\n    \r\n    #customers tr:nth-child(even) {\r\n        background-color: #f2f2f2;\r\n    }\r\n    \r\n    #customers tr:hover {\r\n        background-color: #ddd;\r\n    }\r\n    \r\n    #customers th {\r\n        padding-top: 12px;\r\n        padding-bottom: 12px;\r\n        text-align: left;\r\n        background-color: #4CAF50;\r\n        color: white;\r\n    }\r\n    \r\n    .section {\r\n        margin: 30px;\r\n    }",
                    "styleUrl": "./product-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<ProductsState>"
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "authStore",
                        "type": "Store<AuthState>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<ProductsState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authStore",
                        "type": "Store<AuthState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header [headerDetails]=\"headerDetails\"></app-header>\n\n<div class=\"section\">\n    <!-- <app-table [items]=\"products$ | async\" [headers]=\"headers\"></app-table> -->\n    <table id=\"customers\">\n        <tr>\n            <th>Header</th>\n            <th>Summary</th>\n            <th>Text</th>\n            <th>Edit</th>\n        </tr>\n        <tr *ngFor=\"let product of products$ | async\">\n            <td>{{product.maintext}}</td>\n            <td>{{product.summary}}</td>\n            <td>{{product.text}}</td>\n            <td><span class=\"cursor-pointer font-green\" (click)=\"editProduct(product)\">Edit</span></td>\n        </tr>\n    </table>\n</div>"
        },
        {
            "name": "ProductsComponent",
            "id": "component-ProductsComponent-9c308188cf6b583be044e2dd42c55590",
            "file": "src/app/pages/products/products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product",
            "styleUrls": [
                "./products.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./products.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isEditSection",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isHeaderSection",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "product",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "products$",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "editProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClasses",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataFromEdit",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gotToAdminSection",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { LoadProducts } from './+state/products.actions';\r\nimport { getAuthState } from './../../auth/+state/index';\r\nimport { ProductsState } from './+state/products.reducer';\r\nimport { AuthState } from './../../auth/+state/auth.reducer';\r\nimport { ProductsService } from './services/products/products.service';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\nimport { Product } from './../../auth/data-models/product.d';\r\nimport { Observable } from 'rxjs';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { getProducts } from './+state';\r\n// import { select } from '@ngrx/core/src/operator/select';\r\n@Component({\r\n  selector: 'app-product',\r\n  templateUrl: './products.component.html',\r\n  styleUrls: ['./products.component.scss']\r\n})\r\nexport class ProductsComponent implements OnInit {\r\n\r\n  products$: Observable<Product[]>;\r\n  product: any;\r\n  getState: Observable<any>;\r\n  isAuthenticated = false;\r\n  isHeaderSection = false;\r\n  isEditSection = false;\r\n  user = null;\r\n  errorMessage = null;\r\n\r\n  constructor(private router: Router,\r\n    // private ngZone: NgZone,\r\n    // private changeDetectionRef: ChangeDetectorRef,\r\n              private store: Store<ProductsState>,\r\n              private productsService: ProductsService,\r\n              private authStore: Store<AuthState>) {\r\n    this.getState = this.authStore.select(getAuthState);\r\n  }\r\n\r\n  // // tslint:disable-next-line: typedef\r\n  ngOnInit(): void {\r\n\r\n    /* Logged in user can update add/edit product data.\r\n     For guest user they can able to see products in Html view */\r\n    this.store.dispatch(new LoadProducts());\r\n    this.products$ = this.store.pipe(select(getProducts));\r\n\r\n    this.getState.subscribe((state) => {\r\n      if (state.user !== null) {\r\n        this.isAuthenticated = true;\r\n        this.user = state.user;\r\n      }\r\n    });\r\n  }\r\n\r\n  public editProduct(product: Product): any  {\r\n    this.product = product;\r\n    this.isEditSection = true;\r\n    this.isHeaderSection = false;\r\n    this.productsService.setData(this.product);\r\n  }\r\n\r\n  public getClasses(name: string): any {\r\n    return name;\r\n  }\r\n\r\n  public gotToAdminSection(): any {\r\n    this.router.navigate(['/product/list']);\r\n  }\r\n\r\n\r\n  getDataFromEdit(product: Product): any {\r\n    this.products$ = this.store.pipe(select(getProducts));\r\n    this.isEditSection = false;\r\n    this.isHeaderSection = false;\r\n    // this.ngZone.run(() => {\r\n    //   this.changeDetectionRef.markForCheck();\r\n    // });\r\n  }\r\n\r\n  logOut(): any {\r\n    localStorage.clear();\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pimg1,\r\n.pimg2,\r\n.pimg3 {\r\n    position: relative;\r\n    opacity: 0.70;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    /*\r\n      fixed = parallax\r\n      scroll = normal\r\n    */\r\n    background-attachment: fixed;\r\n}\r\n\r\n.pimg1 {\r\n    background-image: url('../../../assets/img/header.jpg');\r\n    min-height: 400px;\r\n}\r\n\r\n.pimg2 {\r\n    background-image: url('../../../assets/img/gym.jpg');\r\n    min-height: 400px;\r\n}\r\n\r\n.pimg3 {\r\n    background-image: url('../../../assets/img/gym1.jpg');\r\n    min-height: 400px;\r\n}\r\n\r\n.section {\r\n    text-align: center;\r\n    padding: 50px 80px;\r\n}\r\n\r\n.section-light {\r\n    background-color: #f4f4f4;\r\n    color: #666;\r\n}\r\n\r\n.section-dark {\r\n    background-color: #282e34;\r\n    color: #ddd;\r\n}\r\n\r\n.ptext {\r\n    position: absolute;\r\n    top: 50%;\r\n    width: 100%;\r\n    text-align: center;\r\n    color: #000;\r\n    /* font-size:27px; */\r\n    letter-spacing: 8px;\r\n    text-transform: uppercase;\r\n}\r\n\r\n.link {\r\n    cursor: pointer;\r\n}\r\n\r\n.ptext .border {\r\n    background-color: #111;\r\n    color: #fff;\r\n    padding: 20px;\r\n    font-size: 27px;\r\n}\r\n\r\n.ptext .border.trans {\r\n    background-color: transparent;\r\n}\r\n\r\n.ptext .border-top {\r\n    background-color: #111;\r\n    color: #fff;\r\n    padding: 4px;\r\n    font-size: 15px;\r\n}\r\n\r\n.ptext .border-top.trans {\r\n    background-color: transparent;\r\n}\r\n\r\n@media(max-width:568px) {\r\n    .pimg1,\r\n    .pimg2,\r\n    .pimg3 {\r\n        background-attachment: scroll;\r\n    }\r\n}",
                    "styleUrl": "./products.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<ProductsState>"
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "authStore",
                        "type": "Store<AuthState>"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<ProductsState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authStore",
                        "type": "Store<AuthState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--All three pages in a same main page have to make it seperate route in future.\r\nHere pages are shown as per if condition  -->\r\n\r\n<ng-container *ngIf=\"!isEditSection\">\r\n    <!-- Have to make these two if condition into one -->\r\n    <ng-container *ngIf=\"!isHeaderSection\">\r\n        <ng-container *ngFor=\"let product of products$ | async\">\r\n            <div [ngClass]=\"getClasses(product.class)\">\r\n                <div class=\"ptext\">\r\n                    <ng-container *ngIf=\"product.maintext === 'LOGIN'; else normalPage\">\r\n                        <div *ngIf=\"isAuthenticated; then doSomething; else doSomethingElse;\"></div>\r\n                        <ng-template #doSomething>\r\n                            <p class=\"header-font\">You logged in <em>{{user.username}}!</em></p>\r\n                            <button class=\"btn btn-primary\" (click)=\"logOut()\">Log out</button>\r\n                            <button class=\"btn btn-primary margin-small\" (click)=\"gotToAdminSection()\">Admin Section</button>\r\n                        </ng-template>\r\n                        <ng-template #doSomethingElse>\r\n                            <p class=\"header-font\">Please Logged in</p>\r\n                            <a class=\"header-font\" [routerLink]=\"['/user/login']\" class=\"btn btn-primary\">Log in</a>\r\n                        </ng-template>\r\n                    </ng-container>\r\n\r\n                    <ng-template #normalPage>\r\n                        <span class=\"border \">\r\n                {{product.maintext}}\r\n              </span>\r\n                    </ng-template>\r\n                </div>\r\n            </div>\r\n\r\n            <section class=\"section section-light\">\r\n                <h2>{{product.text}}</h2>\r\n                <p>\r\n                    {{product.summary}}\r\n                </p>\r\n            </section>\r\n        </ng-container>\r\n    </ng-container>\r\n\r\n</ng-container>\r\n\r\n<!-- <assignments-product-list *ngIf=\"isHeaderSection\" [products]=\"products$ | async\" (edit)=\"editProduct($event)\"></assignments-product-list>\r\n<assignments-product-add-edit *ngIf=\"isEditSection\" (editProduct)=\"getDataFromEdit($event)\"></assignments-product-add-edit> -->"
        },
        {
            "name": "ServicesComponent",
            "id": "component-ServicesComponent-02602f35e81f45dceb2816369897b675",
            "file": "src/app/layout/services/services.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-services",
            "styleUrls": [
                "./services.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./services.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "service",
                    "defaultValue": "[]",
                    "line": 11,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, OnInit } from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'app-services',\r\n    templateUrl: './services.component.html',\r\n    styleUrls: ['./services.component.scss']\r\n})\r\nexport class ServicesComponent implements OnChanges{\r\n    @Input()service: any = [];\r\n\r\n    ngOnChanges(): void {\r\n        console.log(this.service);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./services.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<section class=\"\">\r\n    <section class=\"boxes\">\r\n        <div class=\"box\" *ngFor=\"let data of service\">\r\n            <i class=\"fas fa-chart-pie fa-4x\"></i>\r\n            <h3>{{ data.text }}</h3>\r\n            <p>{{ data.details }}</p>\r\n        </div>\r\n    </section>\r\n</section>"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-6d25788857dd8be7376836111f140474",
            "file": "src/app/layout/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "headers",
                    "line": 10
                },
                {
                    "name": "items",
                    "line": 9
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: './table.component.html',\r\n   styleUrls: ['./table.component.scss']\r\n})\r\nexport class TableComponent {\r\n  @Input() items;\r\n  @Input() headers;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table {\r\n    font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n    border-collapse: collapse;\r\n    width: 100%;\r\n}\r\n\r\n.table td,\r\n.table th {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n}\r\n\r\n.table tr:nth-child(even) {\r\n    background-color: #f2f2f2;\r\n}\r\n\r\n.table tr:hover {\r\n    background-color: #ddd;\r\n}\r\n\r\n.table th {\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    text-align: left;\r\n    background-color: #4CAF50;\r\n    color: white;\r\n}",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<table>\r\n    <thead>\r\n        <td *ngFor=\"let header of headers\">{{ header }}</td>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let item of items\">\r\n            <td *ngFor=\"let value of item | tableValues\">\r\n                {{ value }}\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DetailsComponent"
                        },
                        {
                            "name": "HeaderLayout2Component"
                        },
                        {
                            "name": "HeaderLayoutComponent"
                        },
                        {
                            "name": "ImageComponent"
                        },
                        {
                            "name": "MainDetailsComponent"
                        },
                        {
                            "name": "ServicesComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TablesValuesPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DetailsComponent"
                        },
                        {
                            "name": "HeaderLayout2Component"
                        },
                        {
                            "name": "HeaderLayoutComponent"
                        },
                        {
                            "name": "ImageComponent"
                        },
                        {
                            "name": "MainDetailsComponent"
                        },
                        {
                            "name": "ServicesComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TablesValuesPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DetailsEffects"
                        },
                        {
                            "name": "HeaderButtonsEffects"
                        },
                        {
                            "name": "ImagesEffects"
                        },
                        {
                            "name": "MainEffects"
                        },
                        {
                            "name": "ProductsEffects"
                        },
                        {
                            "name": "ServicesEffects"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Product2Component"
                        },
                        {
                            "name": "ProductAddEditComponent"
                        },
                        {
                            "name": "ProductListComponent"
                        },
                        {
                            "name": "ProductsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThemeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ThemeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/products.reducer.ts",
                "type": "EntityAdapter<Product>",
                "defaultValue": "createEntityAdapter<Product>({})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "EntityAdapter<Details>",
                "defaultValue": "createEntityAdapter<Details>({})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "EntityAdapter<HeaderButtons>",
                "defaultValue": "createEntityAdapter<HeaderButtons>({})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "EntityAdapter<Image>",
                "defaultValue": "createEntityAdapter<Image>({})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "EntityAdapter<Main>",
                "defaultValue": "createEntityAdapter<Main>({})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "EntityAdapter<Service>",
                "defaultValue": "createEntityAdapter<Service>({})"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme/theme.ts",
                "type": "Theme",
                "defaultValue": "{\n  name: 'dark',\n  properties: {\n    '--foreground-default': '#5C7D99',\n    '--foreground-secondary': '#A3B9CC',\n    '--foreground-tertiary': '#F4FAFF',\n    '--foreground-quaternary': '#E5E5E5',\n    '--foreground-light': '#FFFFFF',\n\n    '--background-default': '#797C80',\n    '--background-secondary': '#41474D',\n    '--background-tertiary': '#08090A',\n    '--background-light': '#41474D',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#B2FFE7'\n  }\n}"
            },
            {
                "name": "db",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "data/server.ts",
                "type": "",
                "defaultValue": "require('./db.json')"
            },
            {
                "name": "DetailsList1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/details/details.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: DetailsComponent,\r\n  template: `\r\n  <app-details [details]=\"details\"></app-details>\r\n`,\r\n  props: {\r\n    details: [ {\r\n        text: 'ASAH',\r\n        details: 'All work and no play makes Jack a dull boy',\r\n        id: 1,\r\n        url: 'https://i.ibb.co/mFHq21Y/header.jpg'\r\n    }]\r\n  },\r\n})"
            },
            {
                "name": "DetailsList2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/details/details.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: DetailsComponent,\r\n    template: `\r\n    <app-details [details]=\"details\"></app-details>\r\n  `,\r\n    props: {\r\n      details: [ {\r\n            text: 'BUILDKNOWLEDGE',\r\n            details: 'All work and no play makes Jack a dull boy',\r\n            id: 1,\r\n            url: 'https://i.ibb.co/mFHq21Y/header.jpg'\r\n        }]\r\n    },\r\n  })"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  api_url: 'http://localhost:3000/'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  api_url: 'http://localhost:3000/'\n}"
            },
            {
                "name": "fs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "data/server.ts",
                "type": "",
                "defaultValue": "require('fs')"
            },
            {
                "name": "generateDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/data-models/details.ts",
                "type": "",
                "defaultValue": "(): Details => {\r\n    return {\r\n      id: faker.random.number(),\r\n      url: faker.image.imageUrl(),\r\n      details: faker.lorem.words(),\r\n      text :  faker.lorem.word(),\r\n    };\r\n  }"
            },
            {
                "name": "generateDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/data-models/details.ts",
                "type": "",
                "defaultValue": "(\r\n    count = faker.random.number({ min: 1, max: 20 })\r\n  ): Details[] => {\r\n    return Array.apply(null, Array(count)).map(() => generateDetail());\r\n  }"
            },
            {
                "name": "getAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/+state/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AuthData>('auth')"
            },
            {
                "name": "getDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/details/index.ts",
                "type": "",
                "defaultValue": "createSelector(getDetailsState, fromDetails.selectAllDetails)"
            },
            {
                "name": "getDetailsEntnites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/details/index.ts",
                "type": "",
                "defaultValue": "createSelector(getDetailsState, fromDetails.selectDetailEntities)"
            },
            {
                "name": "getDetailsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/details/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<fromDetails.DetailsData>('details')"
            },
            {
                "name": "getHeaderButtons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "",
                "defaultValue": "createSelector(getHeaderButtonsState, fromHeaderButton.selectAllselectedHeaderButtons)"
            },
            {
                "name": "getHeaderButtonsEntnites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "",
                "defaultValue": "createSelector(getHeaderButtonsState, fromHeaderButton.selectedHeaderButtonsEntities)"
            },
            {
                "name": "getHeaderButtonsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<fromHeaderButton.HeaderButtonsData>('headers-button')"
            },
            {
                "name": "getImageEntnites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/images/index.ts",
                "type": "",
                "defaultValue": "createSelector(getImagesState, fromImages.selectImageEntities)"
            },
            {
                "name": "getImages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/images/index.ts",
                "type": "",
                "defaultValue": "createSelector(getImagesState, fromImages.selectAllImages)"
            },
            {
                "name": "getImagesState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/images/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<fromImages.ImagesData>('images')"
            },
            {
                "name": "getMain",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/main/index.ts",
                "type": "",
                "defaultValue": "createSelector(getMainState, fromMain.selectAllMain)"
            },
            {
                "name": "getMainEntnites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/main/index.ts",
                "type": "",
                "defaultValue": "createSelector(getMainState, fromMain.selectMainEntities)"
            },
            {
                "name": "getMainState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/main/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<fromMain.MainData>('main')"
            },
            {
                "name": "getProductEntnites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/index.ts",
                "type": "",
                "defaultValue": "createSelector(getProductsState, fromProduct.selectProductEntities)"
            },
            {
                "name": "getProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/index.ts",
                "type": "",
                "defaultValue": "createSelector(getProductsState, fromProduct.selectAllProducts)"
            },
            {
                "name": "getProductsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<fromProduct.ProductsData>('products')"
            },
            {
                "name": "getRouterState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/router.reducer.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<\r\n  fromRouter.RouterReducerState<RouterStateUrl>\r\n>('routerReducer')"
            },
            {
                "name": "getselectedDetailsId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "",
                "defaultValue": "(state: DetailsData) =>\r\n  state.selectedDetailsId"
            },
            {
                "name": "getSelectedHeaderButtons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "",
                "defaultValue": "createSelector(getHeaderButtonsEntnites, getSelectedHeaderButtonsId, (headerDictionary, id) => {\r\n   // tslint:disable-next-line: no-debugger\r\n   debugger;\r\n   return  headerDictionary[id];\r\n})"
            },
            {
                "name": "getselectedHeaderButtonsId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "",
                "defaultValue": "(state: HeaderButtonsData) =>\r\n  state.selectedHeaderButtonsId"
            },
            {
                "name": "getSelectedHeaderButtonsId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "",
                "defaultValue": "createSelector(getHeaderButtonsState, fromHeaderButton.getselectedHeaderButtonsId)"
            },
            {
                "name": "getselectedImagesId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "",
                "defaultValue": "(state: ImagesData) =>\r\n  state.selectedImagesId"
            },
            {
                "name": "getselectedMainId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "",
                "defaultValue": "(state: MainData) =>\r\n  state.selectedMainId"
            },
            {
                "name": "getSelectedProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/index.ts",
                "type": "",
                "defaultValue": "createSelector(getProductEntnites, getSelectedProductId, (productsDictionary, id) => {\r\n   // tslint:disable-next-line: no-debugger\r\n   debugger;\r\n   return  productsDictionary[id];\r\n})"
            },
            {
                "name": "getSelectedProductId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/index.ts",
                "type": "",
                "defaultValue": "createSelector(getProductsState, fromProduct.getSelectedProductId)"
            },
            {
                "name": "getSelectedProductId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/products.reducer.ts",
                "type": "",
                "defaultValue": "(state: ProductsData) =>\r\n  state.selectedProductId"
            },
            {
                "name": "getselectedServiceId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "",
                "defaultValue": "(state: ServiceData) =>\r\n  state.selectedServiceId"
            },
            {
                "name": "getService",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/services/index.ts",
                "type": "",
                "defaultValue": "createSelector(getServiceState, fromService.selectAllService)"
            },
            {
                "name": "getServiceEntnites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/services/index.ts",
                "type": "",
                "defaultValue": "createSelector(getServiceState, fromService.selectServiceEntities)"
            },
            {
                "name": "getServiceState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/services/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<fromService.ServiceData>('services')"
            },
            {
                "name": "getUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/+state/index.ts",
                "type": "",
                "defaultValue": "createSelector(getAuthState, state => state.user)"
            },
            {
                "name": "HeaderLayout1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/header-layout-2/header-layout-2.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: HeaderLayout2Component,\r\n    template: `\r\n  <app-header-layout-2 [headerButtons]=\"headersButton\"></app-header-layout-2>\r\n`,\r\n    props: {\r\n        headersButton: [{\r\n            text: 'Home',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'About',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Details',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Contact',\r\n            id: 1\r\n        }\r\n        ]\r\n\r\n    },\r\n})"
            },
            {
                "name": "HeaderLayout2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/header-layout-2/header-layout-2.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: HeaderLayout2Component,\r\n    template: `\r\n    <app-header-layout-2 [headerButtons]=\"headersButton\"></app-header-layout-2>\r\n  `,\r\n    props: {\r\n        headersButton: [{\r\n            text: 'First',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Second',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Third',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Fourth',\r\n            id: 1\r\n        }\r\n        ]\r\n    },\r\n})"
            },
            {
                "name": "Image1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/images/images.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: ImageComponent,\r\n    template: `\r\n    <app-images [images]=\"imageDetails\"></app-images>\r\n`,\r\n    props: {\r\n        imageDetails: [\r\n            {\r\n                url: 'https://i.ibb.co/mFHq21Y/header.jpg',\r\n                id: 8\r\n            },\r\n            {\r\n                url: 'https://i.ibb.co/WHhMG3f/i-Phone-app.png',\r\n                id: 9\r\n            },\r\n            {\r\n                url: 'https://i.ibb.co/M7t8szf/baseball.jpg',\r\n                id: 10\r\n            },\r\n            {\r\n                url: 'https://i.ibb.co/PtP2y3C/rogers.jpg',\r\n                id: 11\r\n            },\r\n            {\r\n                url: 'https://i.ibb.co/bm9Wg7v/ronaldo.jpg',\r\n                id: 12\r\n            }, {\r\n                url: 'https://i.ibb.co/PQqrsVk/Sports-Stores-01.jpg',\r\n                id: 13\r\n            }\r\n        ]\r\n\r\n    },\r\n})"
            },
            {
                "name": "Image2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/images/images.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: ImageComponent,\r\n    template: `\r\n    <app-images [images]=\"imageDetails\"></app-images>\r\n  `,\r\n    props: {\r\n        imageDetails: [{\r\n            url: 'https://i.ibb.co/c12j7xf/sushil.jpg',\r\n            id: 1\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/7k0cJXs/ab.jpg',\r\n            id: 2\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/J31P1q5/app-image.png',\r\n            id: 3\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/dbMDwbV/app-image2.png',\r\n            id: 4\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/qMWScsW/cta-bg.jpg',\r\n            id: 5\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/gPq6b5v/gym.jpg',\r\n            id: 6\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/2Y5LgrF/gym1.jpg',\r\n            id: 7\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/mFHq21Y/header.jpg',\r\n            id: 8\r\n        }\r\n        ]\r\n    },\r\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/+state/auth.reducer.ts",
                "type": "AuthData",
                "defaultValue": "{\n  error: '',\n  user: null,\n  loading: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/products.reducer.ts",
                "type": "ProductsData",
                "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedProductId: null,\r\n  loading: false\r\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "DetailsData",
                "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedDetailsId: null,\r\n  loading: false\r\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "HeaderButtonsData",
                "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedHeaderButtonsId: null,\r\n  loading: false\r\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "ImagesData",
                "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedImagesId: null,\r\n  loading: false\r\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "MainData",
                "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedMainId: null,\r\n  loading: false\r\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "ServiceData",
                "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedServiceId: null,\r\n  loading: false\r\n})"
            },
            {
                "name": "jsonServer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "data/server.ts",
                "type": "",
                "defaultValue": "require('json-server')"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme/theme.ts",
                "type": "Theme",
                "defaultValue": "{\n  name: 'light',\n  properties: {\n    '--foreground-default': '#08090A',\n    '--foreground-secondary': '#41474D',\n    '--foreground-tertiary': '#797C80',\n    '--foreground-quaternary': '#F4FAFF',\n    '--foreground-light': '#41474D',\n\n    '--background-default': '#F4FAFF',\n    '--background-secondary': '#A3B9CC',\n    '--background-tertiary': '#5C7D99',\n    '--background-light': '#FFFFFF',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#B2FFE7'\n  }\n}"
            },
            {
                "name": "MainDetailsList1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/main/main.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: MainDetailsComponent,\r\n  template: `\r\n  <app-main [main]=\"mainDetails\"></app-main>\r\n`,\r\n  props: {\r\n    mainDetails: [{\r\n        text: 'This is just a test',\r\n        id: 1,\r\n        details : 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae alias reiciendis deleniti possimus nemo non repellendus? Quae atque vero modi quidem! Autem cupiditate fugit doloribus ad amet, asperiores provident commodi.',\r\n        url: 'https://i.ibb.co/mFHq21Y/header.jpg'\r\n    }]\r\n  },\r\n})"
            },
            {
                "name": "MainDetailsList2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/main/main.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: MainDetailsComponent,\r\n    template: `\r\n    <app-main [main]=\"mainDetails\"></app-main>\r\n  `,\r\n    props: {\r\n        mainDetails: [{\r\n            text: 'All work and no play makes Jack a dull boy',\r\n            id: 1,\r\n            details : 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae alias reiciendis deleniti possimus nemo non repellendus? Quae atque vero modi quidem! Autem cupiditate fugit doloribus ad amet, asperiores provident commodi.',\r\n            url: 'https://i.ibb.co/mFHq21Y/header.jpg'\r\n        }]\r\n    },\r\n  })"
            },
            {
                "name": "middlewares",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "data/server.ts",
                "type": "",
                "defaultValue": "jsonServer.defaults()"
            },
            {
                "name": "ProductEdit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/header/header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: HeaderLayoutComponent,\r\n    template: `\r\n    <app-header [headerDetails]=\"headerDetails\"></app-header>\r\n  `,\r\n    props: {\r\n      headerDetails: {\r\n          page: 'Product Edit'\r\n      }\r\n    },\r\n  })"
            },
            {
                "name": "ProductList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/header/header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: HeaderLayoutComponent,\r\n  template: `\r\n  <app-header [headerDetails]=\"headerDetails\"></app-header>\r\n`,\r\n  props: {\r\n    headerDetails: {\r\n        page: 'Product List'\r\n    }\r\n  },\r\n})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/router.reducer.ts",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\r\n  routerReducer: fromRouter.routerReducer,\r\n}"
            },
            {
                "name": "router",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "data/server.ts",
                "type": "",
                "defaultValue": "jsonServer.router('data/db.json')"
            },
            {
                "name": "server",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "data/server.ts",
                "type": "",
                "defaultValue": "jsonServer.create()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/products.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            }
        ],
        "functions": [
            {
                "name": "authReducer",
                "file": "src/app/auth/+state/auth.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "AuthData",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkIfAdmin",
                "file": "data/server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "user",
                        "type": ""
                    },
                    {
                        "name": "bypassToken",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bypassToken",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "detailsReducer",
                "file": "src/app/pages/products/+state/details/details.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "DetailsData",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "formatUser",
                "file": "data/server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "user",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "headerButtonsReducer",
                "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "HeaderButtonsData",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "imagesReducer",
                "file": "src/app/pages/products/+state/images/images.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "ImagesData",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isAuthorized",
                "file": "data/server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "req",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "req",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mainReducer",
                "file": "src/app/pages/products/+state/main/main.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "MainData",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "productsReducer",
                "file": "src/app/pages/products/+state/products.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "ProductsData",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "readData",
                "file": "data/server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "readUsers",
                "file": "data/server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            },
            {
                "name": "serviceReducer",
                "file": "src/app/pages/products/+state/services/services.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "ServiceData",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Login | LoginSuccess | LoginFail",
                "file": "src/app/auth/+state/auth.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "DetailsActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadDetails | LoadDetailsSuccess | LoadDetailsFail",
                "file": "src/app/pages/products/+state/details/details.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "HeaderButtonAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadHeadersButtons | LoadHeadersButtonsFail | LoadHeadersButtonsSuccess",
                "file": "src/app/pages/products/+state/headers-button/headers-button.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ImagesActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadImages | LoadImagesSuccess | LoadImagesFail",
                "file": "src/app/pages/products/+state/images/images.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "MainActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadMain | LoadMainSuccess | LoadMainFail",
                "file": "src/app/pages/products/+state/main/main.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ProductsActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadProducts | LoadProductsSuccess | LoadProductsFail | UpdateProductsFail | UpdateProductsSuccess | UpdateProducts",
                "file": "src/app/pages/products/+state/products.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ServicesActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadServices | LoadServicesSuccess | LoadServicesFail",
                "file": "src/app/pages/products/+state/services/services.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "Login",
                        "value": "[Auth Page] Login"
                    },
                    {
                        "name": "LoginSuccess",
                        "value": "[Auth API] Login Success"
                    },
                    {
                        "name": "LoginFail",
                        "value": "[Auth API] Login Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/auth/+state/auth.actions.ts"
            },
            {
                "name": "DetailsActionTypes",
                "childs": [
                    {
                        "name": "LoadDetails",
                        "value": "[Details] Load  Details"
                    },
                    {
                        "name": "LoadDetailsSuccess",
                        "value": "[Details API] Load Details Success"
                    },
                    {
                        "name": "LoadDetailsFail",
                        "value": "[Details API]  Load Details Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/pages/products/+state/details/details.actions.ts"
            },
            {
                "name": "HeaderButtonActionTypes",
                "childs": [
                    {
                        "name": "LoadHeadersButtons",
                        "value": "[Headers Buttons] Load Headers Buttons"
                    },
                    {
                        "name": "LoadHeadersButtonsSuccess",
                        "value": "[Headers Buttons API] Load Headers Buttons Success"
                    },
                    {
                        "name": "LoadHeadersButtonsFail",
                        "value": "[Headers Buttons API]  Load Headers Buttons Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/pages/products/+state/headers-button/headers-button.actions.ts"
            },
            {
                "name": "ImagesActionTypes",
                "childs": [
                    {
                        "name": "LoadImages",
                        "value": "[Images Page] Load Images"
                    },
                    {
                        "name": "LoadImagesSuccess",
                        "value": "[Images API] Load Images Success"
                    },
                    {
                        "name": "LoadImagesFail",
                        "value": "[Images API]  Load Images Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/pages/products/+state/images/images.actions.ts"
            },
            {
                "name": "MainActionTypes",
                "childs": [
                    {
                        "name": "LoadMain",
                        "value": "[Main] Load Main"
                    },
                    {
                        "name": "LoadMainSuccess",
                        "value": "[Main API] Load Main Success"
                    },
                    {
                        "name": "LoadMainFail",
                        "value": "[Main API]  Load Main Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/pages/products/+state/main/main.actions.ts"
            },
            {
                "name": "ProductsActionTypes",
                "childs": [
                    {
                        "name": "LoadProducts",
                        "value": "[Products Page] Load Products"
                    },
                    {
                        "name": "LoadProductsSuccess",
                        "value": "[Products API] Load Products Success"
                    },
                    {
                        "name": "LoadProductsFail",
                        "value": "[Products API] LoadProducts Fail"
                    },
                    {
                        "name": "UpdateProducts",
                        "value": "[Products Page] Update Products"
                    },
                    {
                        "name": "UpdateProductsSuccess",
                        "value": "[Products API] Update Products Success"
                    },
                    {
                        "name": "UpdateProductsFail",
                        "value": "[Products API] Update Products Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/pages/products/+state/products.actions.ts"
            },
            {
                "name": "ServicesActionTypes",
                "childs": [
                    {
                        "name": "LoadServices",
                        "value": "[Services] Load Services"
                    },
                    {
                        "name": "LoadServicesSuccess",
                        "value": "[Services API] Load Services Success"
                    },
                    {
                        "name": "LoadServicesFail",
                        "value": "[Services API]  Load Services Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/pages/products/+state/services/services.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/pages/products/+state/products.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/products.reducer.ts",
                    "type": "EntityAdapter<Product>",
                    "defaultValue": "createEntityAdapter<Product>({})"
                },
                {
                    "name": "getSelectedProductId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/products.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: ProductsData) =>\r\n  state.selectedProductId"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/products.reducer.ts",
                    "type": "ProductsData",
                    "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedProductId: null,\r\n  loading: false\r\n})"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/products.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/pages/products/+state/details/details.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/details/details.reducer.ts",
                    "type": "EntityAdapter<Details>",
                    "defaultValue": "createEntityAdapter<Details>({})"
                },
                {
                    "name": "getselectedDetailsId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/details/details.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: DetailsData) =>\r\n  state.selectedDetailsId"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/details/details.reducer.ts",
                    "type": "DetailsData",
                    "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedDetailsId: null,\r\n  loading: false\r\n})"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/details/details.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/pages/products/+state/headers-button/headers-button.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                    "type": "EntityAdapter<HeaderButtons>",
                    "defaultValue": "createEntityAdapter<HeaderButtons>({})"
                },
                {
                    "name": "getselectedHeaderButtonsId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: HeaderButtonsData) =>\r\n  state.selectedHeaderButtonsId"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                    "type": "HeaderButtonsData",
                    "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedHeaderButtonsId: null,\r\n  loading: false\r\n})"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/pages/products/+state/images/images.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/images/images.reducer.ts",
                    "type": "EntityAdapter<Image>",
                    "defaultValue": "createEntityAdapter<Image>({})"
                },
                {
                    "name": "getselectedImagesId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/images/images.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: ImagesData) =>\r\n  state.selectedImagesId"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/images/images.reducer.ts",
                    "type": "ImagesData",
                    "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedImagesId: null,\r\n  loading: false\r\n})"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/images/images.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/pages/products/+state/main/main.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/main/main.reducer.ts",
                    "type": "EntityAdapter<Main>",
                    "defaultValue": "createEntityAdapter<Main>({})"
                },
                {
                    "name": "getselectedMainId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/main/main.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: MainData) =>\r\n  state.selectedMainId"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/main/main.reducer.ts",
                    "type": "MainData",
                    "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedMainId: null,\r\n  loading: false\r\n})"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/main/main.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/pages/products/+state/services/services.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/services/services.reducer.ts",
                    "type": "EntityAdapter<Service>",
                    "defaultValue": "createEntityAdapter<Service>({})"
                },
                {
                    "name": "getselectedServiceId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/services/services.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: ServiceData) =>\r\n  state.selectedServiceId"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/services/services.reducer.ts",
                    "type": "ServiceData",
                    "defaultValue": "adapter.getInitialState({\r\n  error: '',\r\n  selectedServiceId: null,\r\n  loading: false\r\n})"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/services/services.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/theme/theme.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\n  name: 'dark',\n  properties: {\n    '--foreground-default': '#5C7D99',\n    '--foreground-secondary': '#A3B9CC',\n    '--foreground-tertiary': '#F4FAFF',\n    '--foreground-quaternary': '#E5E5E5',\n    '--foreground-light': '#FFFFFF',\n\n    '--background-default': '#797C80',\n    '--background-secondary': '#41474D',\n    '--background-tertiary': '#08090A',\n    '--background-light': '#41474D',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#B2FFE7'\n  }\n}"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\n  name: 'light',\n  properties: {\n    '--foreground-default': '#08090A',\n    '--foreground-secondary': '#41474D',\n    '--foreground-tertiary': '#797C80',\n    '--foreground-quaternary': '#F4FAFF',\n    '--foreground-light': '#41474D',\n\n    '--background-default': '#F4FAFF',\n    '--background-secondary': '#A3B9CC',\n    '--background-tertiary': '#5C7D99',\n    '--background-light': '#FFFFFF',\n\n    '--primary-default': '#5DFDCB',\n    '--primary-dark': '#24B286',\n    '--primary-light': '#B2FFE7'\n  }\n}"
                }
            ],
            "data/server.ts": [
                {
                    "name": "db",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "data/server.ts",
                    "type": "",
                    "defaultValue": "require('./db.json')"
                },
                {
                    "name": "fs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "data/server.ts",
                    "type": "",
                    "defaultValue": "require('fs')"
                },
                {
                    "name": "jsonServer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "data/server.ts",
                    "type": "",
                    "defaultValue": "require('json-server')"
                },
                {
                    "name": "middlewares",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "data/server.ts",
                    "type": "",
                    "defaultValue": "jsonServer.defaults()"
                },
                {
                    "name": "router",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "data/server.ts",
                    "type": "",
                    "defaultValue": "jsonServer.router('data/db.json')"
                },
                {
                    "name": "server",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "data/server.ts",
                    "type": "",
                    "defaultValue": "jsonServer.create()"
                }
            ],
            "src/app/layout/details/details.stories.ts": [
                {
                    "name": "DetailsList1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/details/details.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: DetailsComponent,\r\n  template: `\r\n  <app-details [details]=\"details\"></app-details>\r\n`,\r\n  props: {\r\n    details: [ {\r\n        text: 'ASAH',\r\n        details: 'All work and no play makes Jack a dull boy',\r\n        id: 1,\r\n        url: 'https://i.ibb.co/mFHq21Y/header.jpg'\r\n    }]\r\n  },\r\n})"
                },
                {
                    "name": "DetailsList2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/details/details.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: DetailsComponent,\r\n    template: `\r\n    <app-details [details]=\"details\"></app-details>\r\n  `,\r\n    props: {\r\n      details: [ {\r\n            text: 'BUILDKNOWLEDGE',\r\n            details: 'All work and no play makes Jack a dull boy',\r\n            id: 1,\r\n            url: 'https://i.ibb.co/mFHq21Y/header.jpg'\r\n        }]\r\n    },\r\n  })"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  api_url: 'http://localhost:3000/'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  api_url: 'http://localhost:3000/'\n}"
                }
            ],
            "src/app/auth/data-models/details.ts": [
                {
                    "name": "generateDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/data-models/details.ts",
                    "type": "",
                    "defaultValue": "(): Details => {\r\n    return {\r\n      id: faker.random.number(),\r\n      url: faker.image.imageUrl(),\r\n      details: faker.lorem.words(),\r\n      text :  faker.lorem.word(),\r\n    };\r\n  }"
                },
                {
                    "name": "generateDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/data-models/details.ts",
                    "type": "",
                    "defaultValue": "(\r\n    count = faker.random.number({ min: 1, max: 20 })\r\n  ): Details[] => {\r\n    return Array.apply(null, Array(count)).map(() => generateDetail());\r\n  }"
                }
            ],
            "src/app/auth/+state/index.ts": [
                {
                    "name": "getAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/+state/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AuthData>('auth')"
                },
                {
                    "name": "getUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/+state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getAuthState, state => state.user)"
                }
            ],
            "src/app/pages/products/+state/details/index.ts": [
                {
                    "name": "getDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/details/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getDetailsState, fromDetails.selectAllDetails)"
                },
                {
                    "name": "getDetailsEntnites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/details/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getDetailsState, fromDetails.selectDetailEntities)"
                },
                {
                    "name": "getDetailsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/details/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromDetails.DetailsData>('details')"
                }
            ],
            "src/app/pages/products/+state/headers-button/index.ts": [
                {
                    "name": "getHeaderButtons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/headers-button/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getHeaderButtonsState, fromHeaderButton.selectAllselectedHeaderButtons)"
                },
                {
                    "name": "getHeaderButtonsEntnites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/headers-button/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getHeaderButtonsState, fromHeaderButton.selectedHeaderButtonsEntities)"
                },
                {
                    "name": "getHeaderButtonsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/headers-button/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromHeaderButton.HeaderButtonsData>('headers-button')"
                },
                {
                    "name": "getSelectedHeaderButtons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/headers-button/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getHeaderButtonsEntnites, getSelectedHeaderButtonsId, (headerDictionary, id) => {\r\n   // tslint:disable-next-line: no-debugger\r\n   debugger;\r\n   return  headerDictionary[id];\r\n})"
                },
                {
                    "name": "getSelectedHeaderButtonsId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/headers-button/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getHeaderButtonsState, fromHeaderButton.getselectedHeaderButtonsId)"
                }
            ],
            "src/app/pages/products/+state/images/index.ts": [
                {
                    "name": "getImageEntnites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/images/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getImagesState, fromImages.selectImageEntities)"
                },
                {
                    "name": "getImages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/images/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getImagesState, fromImages.selectAllImages)"
                },
                {
                    "name": "getImagesState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/images/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromImages.ImagesData>('images')"
                }
            ],
            "src/app/pages/products/+state/main/index.ts": [
                {
                    "name": "getMain",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/main/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getMainState, fromMain.selectAllMain)"
                },
                {
                    "name": "getMainEntnites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/main/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getMainState, fromMain.selectMainEntities)"
                },
                {
                    "name": "getMainState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/main/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromMain.MainData>('main')"
                }
            ],
            "src/app/pages/products/+state/index.ts": [
                {
                    "name": "getProductEntnites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getProductsState, fromProduct.selectProductEntities)"
                },
                {
                    "name": "getProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getProductsState, fromProduct.selectAllProducts)"
                },
                {
                    "name": "getProductsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromProduct.ProductsData>('products')"
                },
                {
                    "name": "getSelectedProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getProductEntnites, getSelectedProductId, (productsDictionary, id) => {\r\n   // tslint:disable-next-line: no-debugger\r\n   debugger;\r\n   return  productsDictionary[id];\r\n})"
                },
                {
                    "name": "getSelectedProductId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getProductsState, fromProduct.getSelectedProductId)"
                }
            ],
            "src/app/store/reducers/router.reducer.ts": [
                {
                    "name": "getRouterState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/router.reducer.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<\r\n  fromRouter.RouterReducerState<RouterStateUrl>\r\n>('routerReducer')"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/router.reducer.ts",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\r\n  routerReducer: fromRouter.routerReducer,\r\n}"
                }
            ],
            "src/app/pages/products/+state/services/index.ts": [
                {
                    "name": "getService",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/services/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getServiceState, fromService.selectAllService)"
                },
                {
                    "name": "getServiceEntnites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/services/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(getServiceState, fromService.selectServiceEntities)"
                },
                {
                    "name": "getServiceState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/products/+state/services/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromService.ServiceData>('services')"
                }
            ],
            "src/app/layout/header-layout-2/header-layout-2.stories.ts": [
                {
                    "name": "HeaderLayout1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/header-layout-2/header-layout-2.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: HeaderLayout2Component,\r\n    template: `\r\n  <app-header-layout-2 [headerButtons]=\"headersButton\"></app-header-layout-2>\r\n`,\r\n    props: {\r\n        headersButton: [{\r\n            text: 'Home',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'About',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Details',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Contact',\r\n            id: 1\r\n        }\r\n        ]\r\n\r\n    },\r\n})"
                },
                {
                    "name": "HeaderLayout2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/header-layout-2/header-layout-2.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: HeaderLayout2Component,\r\n    template: `\r\n    <app-header-layout-2 [headerButtons]=\"headersButton\"></app-header-layout-2>\r\n  `,\r\n    props: {\r\n        headersButton: [{\r\n            text: 'First',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Second',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Third',\r\n            id: 1\r\n        },\r\n        {\r\n            text: 'Fourth',\r\n            id: 1\r\n        }\r\n        ]\r\n    },\r\n})"
                }
            ],
            "src/app/layout/images/images.stories.ts": [
                {
                    "name": "Image1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/images/images.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: ImageComponent,\r\n    template: `\r\n    <app-images [images]=\"imageDetails\"></app-images>\r\n`,\r\n    props: {\r\n        imageDetails: [\r\n            {\r\n                url: 'https://i.ibb.co/mFHq21Y/header.jpg',\r\n                id: 8\r\n            },\r\n            {\r\n                url: 'https://i.ibb.co/WHhMG3f/i-Phone-app.png',\r\n                id: 9\r\n            },\r\n            {\r\n                url: 'https://i.ibb.co/M7t8szf/baseball.jpg',\r\n                id: 10\r\n            },\r\n            {\r\n                url: 'https://i.ibb.co/PtP2y3C/rogers.jpg',\r\n                id: 11\r\n            },\r\n            {\r\n                url: 'https://i.ibb.co/bm9Wg7v/ronaldo.jpg',\r\n                id: 12\r\n            }, {\r\n                url: 'https://i.ibb.co/PQqrsVk/Sports-Stores-01.jpg',\r\n                id: 13\r\n            }\r\n        ]\r\n\r\n    },\r\n})"
                },
                {
                    "name": "Image2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/images/images.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: ImageComponent,\r\n    template: `\r\n    <app-images [images]=\"imageDetails\"></app-images>\r\n  `,\r\n    props: {\r\n        imageDetails: [{\r\n            url: 'https://i.ibb.co/c12j7xf/sushil.jpg',\r\n            id: 1\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/7k0cJXs/ab.jpg',\r\n            id: 2\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/J31P1q5/app-image.png',\r\n            id: 3\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/dbMDwbV/app-image2.png',\r\n            id: 4\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/qMWScsW/cta-bg.jpg',\r\n            id: 5\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/gPq6b5v/gym.jpg',\r\n            id: 6\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/2Y5LgrF/gym1.jpg',\r\n            id: 7\r\n        },\r\n        {\r\n            url: 'https://i.ibb.co/mFHq21Y/header.jpg',\r\n            id: 8\r\n        }\r\n        ]\r\n    },\r\n})"
                }
            ],
            "src/app/auth/+state/auth.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/+state/auth.reducer.ts",
                    "type": "AuthData",
                    "defaultValue": "{\n  error: '',\n  user: null,\n  loading: false\n}"
                }
            ],
            "src/app/layout/main/main.stories.ts": [
                {
                    "name": "MainDetailsList1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/main/main.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: MainDetailsComponent,\r\n  template: `\r\n  <app-main [main]=\"mainDetails\"></app-main>\r\n`,\r\n  props: {\r\n    mainDetails: [{\r\n        text: 'This is just a test',\r\n        id: 1,\r\n        details : 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae alias reiciendis deleniti possimus nemo non repellendus? Quae atque vero modi quidem! Autem cupiditate fugit doloribus ad amet, asperiores provident commodi.',\r\n        url: 'https://i.ibb.co/mFHq21Y/header.jpg'\r\n    }]\r\n  },\r\n})"
                },
                {
                    "name": "MainDetailsList2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/main/main.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: MainDetailsComponent,\r\n    template: `\r\n    <app-main [main]=\"mainDetails\"></app-main>\r\n  `,\r\n    props: {\r\n        mainDetails: [{\r\n            text: 'All work and no play makes Jack a dull boy',\r\n            id: 1,\r\n            details : 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae alias reiciendis deleniti possimus nemo non repellendus? Quae atque vero modi quidem! Autem cupiditate fugit doloribus ad amet, asperiores provident commodi.',\r\n            url: 'https://i.ibb.co/mFHq21Y/header.jpg'\r\n        }]\r\n    },\r\n  })"
                }
            ],
            "src/app/layout/header/header.stories.ts": [
                {
                    "name": "ProductEdit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: HeaderLayoutComponent,\r\n    template: `\r\n    <app-header [headerDetails]=\"headerDetails\"></app-header>\r\n  `,\r\n    props: {\r\n      headerDetails: {\r\n          page: 'Product Edit'\r\n      }\r\n    },\r\n  })"
                },
                {
                    "name": "ProductList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: HeaderLayoutComponent,\r\n  template: `\r\n  <app-header [headerDetails]=\"headerDetails\"></app-header>\r\n`,\r\n  props: {\r\n    headerDetails: {\r\n        page: 'Product List'\r\n    }\r\n  },\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/auth/+state/auth.reducer.ts": [
                {
                    "name": "authReducer",
                    "file": "src/app/auth/+state/auth.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "AuthData",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "data/server.ts": [
                {
                    "name": "checkIfAdmin",
                    "file": "data/server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        },
                        {
                            "name": "bypassToken",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bypassToken",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatUser",
                    "file": "data/server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAuthorized",
                    "file": "data/server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "req",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readData",
                    "file": "data/server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readUsers",
                    "file": "data/server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/pages/products/+state/details/details.reducer.ts": [
                {
                    "name": "detailsReducer",
                    "file": "src/app/pages/products/+state/details/details.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "DetailsData",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/products/+state/headers-button/headers-button.reducer.ts": [
                {
                    "name": "headerButtonsReducer",
                    "file": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "HeaderButtonsData",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/products/+state/images/images.reducer.ts": [
                {
                    "name": "imagesReducer",
                    "file": "src/app/pages/products/+state/images/images.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "ImagesData",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/products/+state/main/main.reducer.ts": [
                {
                    "name": "mainReducer",
                    "file": "src/app/pages/products/+state/main/main.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "MainData",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/products/+state/products.reducer.ts": [
                {
                    "name": "productsReducer",
                    "file": "src/app/pages/products/+state/products.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "ProductsData",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/products/+state/services/services.reducer.ts": [
                {
                    "name": "serviceReducer",
                    "file": "src/app/pages/products/+state/services/services.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "ServiceData",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/auth/+state/auth.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "Login",
                            "value": "[Auth Page] Login"
                        },
                        {
                            "name": "LoginSuccess",
                            "value": "[Auth API] Login Success"
                        },
                        {
                            "name": "LoginFail",
                            "value": "[Auth API] Login Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/auth/+state/auth.actions.ts"
                }
            ],
            "src/app/pages/products/+state/details/details.actions.ts": [
                {
                    "name": "DetailsActionTypes",
                    "childs": [
                        {
                            "name": "LoadDetails",
                            "value": "[Details] Load  Details"
                        },
                        {
                            "name": "LoadDetailsSuccess",
                            "value": "[Details API] Load Details Success"
                        },
                        {
                            "name": "LoadDetailsFail",
                            "value": "[Details API]  Load Details Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/pages/products/+state/details/details.actions.ts"
                }
            ],
            "src/app/pages/products/+state/headers-button/headers-button.actions.ts": [
                {
                    "name": "HeaderButtonActionTypes",
                    "childs": [
                        {
                            "name": "LoadHeadersButtons",
                            "value": "[Headers Buttons] Load Headers Buttons"
                        },
                        {
                            "name": "LoadHeadersButtonsSuccess",
                            "value": "[Headers Buttons API] Load Headers Buttons Success"
                        },
                        {
                            "name": "LoadHeadersButtonsFail",
                            "value": "[Headers Buttons API]  Load Headers Buttons Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/pages/products/+state/headers-button/headers-button.actions.ts"
                }
            ],
            "src/app/pages/products/+state/images/images.actions.ts": [
                {
                    "name": "ImagesActionTypes",
                    "childs": [
                        {
                            "name": "LoadImages",
                            "value": "[Images Page] Load Images"
                        },
                        {
                            "name": "LoadImagesSuccess",
                            "value": "[Images API] Load Images Success"
                        },
                        {
                            "name": "LoadImagesFail",
                            "value": "[Images API]  Load Images Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/pages/products/+state/images/images.actions.ts"
                }
            ],
            "src/app/pages/products/+state/main/main.actions.ts": [
                {
                    "name": "MainActionTypes",
                    "childs": [
                        {
                            "name": "LoadMain",
                            "value": "[Main] Load Main"
                        },
                        {
                            "name": "LoadMainSuccess",
                            "value": "[Main API] Load Main Success"
                        },
                        {
                            "name": "LoadMainFail",
                            "value": "[Main API]  Load Main Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/pages/products/+state/main/main.actions.ts"
                }
            ],
            "src/app/pages/products/+state/products.actions.ts": [
                {
                    "name": "ProductsActionTypes",
                    "childs": [
                        {
                            "name": "LoadProducts",
                            "value": "[Products Page] Load Products"
                        },
                        {
                            "name": "LoadProductsSuccess",
                            "value": "[Products API] Load Products Success"
                        },
                        {
                            "name": "LoadProductsFail",
                            "value": "[Products API] LoadProducts Fail"
                        },
                        {
                            "name": "UpdateProducts",
                            "value": "[Products Page] Update Products"
                        },
                        {
                            "name": "UpdateProductsSuccess",
                            "value": "[Products API] Update Products Success"
                        },
                        {
                            "name": "UpdateProductsFail",
                            "value": "[Products API] Update Products Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/pages/products/+state/products.actions.ts"
                }
            ],
            "src/app/pages/products/+state/services/services.actions.ts": [
                {
                    "name": "ServicesActionTypes",
                    "childs": [
                        {
                            "name": "LoadServices",
                            "value": "[Services] Load Services"
                        },
                        {
                            "name": "LoadServicesSuccess",
                            "value": "[Services API] Load Services Success"
                        },
                        {
                            "name": "LoadServicesFail",
                            "value": "[Services API]  Load Services Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/pages/products/+state/services/services.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/auth/+state/auth.actions.ts": [
                {
                    "name": "AuthActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Login | LoginSuccess | LoginFail",
                    "file": "src/app/auth/+state/auth.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/pages/products/+state/details/details.actions.ts": [
                {
                    "name": "DetailsActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadDetails | LoadDetailsSuccess | LoadDetailsFail",
                    "file": "src/app/pages/products/+state/details/details.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/pages/products/+state/headers-button/headers-button.actions.ts": [
                {
                    "name": "HeaderButtonAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadHeadersButtons | LoadHeadersButtonsFail | LoadHeadersButtonsSuccess",
                    "file": "src/app/pages/products/+state/headers-button/headers-button.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/pages/products/+state/images/images.actions.ts": [
                {
                    "name": "ImagesActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadImages | LoadImagesSuccess | LoadImagesFail",
                    "file": "src/app/pages/products/+state/images/images.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/pages/products/+state/main/main.actions.ts": [
                {
                    "name": "MainActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadMain | LoadMainSuccess | LoadMainFail",
                    "file": "src/app/pages/products/+state/main/main.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/pages/products/+state/products.actions.ts": [
                {
                    "name": "ProductsActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadProducts | LoadProductsSuccess | LoadProductsFail | UpdateProductsFail | UpdateProductsSuccess | UpdateProducts",
                    "file": "src/app/pages/products/+state/products.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/pages/products/+state/services/services.actions.ts": [
                {
                    "name": "ServicesActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadServices | LoadServicesSuccess | LoadServicesFail",
                    "file": "src/app/pages/products/+state/services/services.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "product/main2",
                        "pathMatch": "full"
                    },
                    {
                        "path": "user",
                        "loadChildren": "../app/auth/auth.module#AuthModule"
                    },
                    {
                        "path": "product",
                        "loadChildren": "../app/pages/products/products.module#ProductModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ProductModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "authRoutes",
                "filename": "src/app/auth/auth.module.ts",
                "module": "AuthModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "data/server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "checkIfAdmin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "formatUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isAuthorized",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "readData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "readUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "db",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "jsonServer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "middlewares",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "router",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "data/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "server",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/auth.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthEntity",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/auth/+state/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/auth.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/+state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/data-models/details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Details",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/data-models/details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "generateDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/data-models/details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "generateDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/service/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/details/details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/details/details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DetailsList1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/details/details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DetailsList2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header-layout-2/header-layout-2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderLayout2Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header-layout-2/header-layout-2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeaderLayout1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header-layout-2/header-layout-2.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeaderLayout2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductEdit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/images/images.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/images/images.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Image1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/images/images.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Image2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/main.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MainDetailsList1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/main.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MainDetailsList2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/services/services.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServicesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/table/table-value.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TablesValuesPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadDetails",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadDetailsFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadDetailsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DetailsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DetailsData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DetailsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "detailsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getselectedDetailsId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/details.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDetailsEntnites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/details/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDetailsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadHeadersButtons",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadHeadersButtonsFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadHeadersButtonsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HeaderButtonsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HeaderButtonsData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HeadersButtonState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "headerButtonsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getselectedHeaderButtonsId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/headers-button.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getHeaderButtons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getHeaderButtonsEntnites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getHeaderButtonsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedHeaderButtons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/headers-button/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedHeaderButtonsId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadImages",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadImagesFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadImagesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImagesEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImagesData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImagesState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "imagesReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getselectedImagesId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/images.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getImageEntnites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getImages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/images/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getImagesState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProductEntnites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProductsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedProductId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMain",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMainEntnites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMainState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMain",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMainFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMainSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MainEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MainData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MainState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mainReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getselectedMainId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/main/main.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadProducts",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadProductsFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadProductsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProducts",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProductsFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProductsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductsData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "productsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedProductId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getServiceEntnites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getServiceState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadServices",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadServicesFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadServicesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServicesEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServiceData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServiceState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "serviceReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getselectedServiceId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/+state/services/services.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/main-layout-2/main-layout-2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Product2Component",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/product-add-edit/product-add-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductAddEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/products/services/products/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/router.reducer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/router.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterStateUrl",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/router.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/router.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRouterState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/router.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Theme",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}